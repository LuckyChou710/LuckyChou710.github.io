<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LuckyChou-Blog</title>
  
  
  <link href="https://luckychou.gitee.io/atom.xml" rel="self"/>
  
  <link href="https://luckychou.gitee.io/"/>
  <updated>2021-04-22T16:46:59.933Z</updated>
  <id>https://luckychou.gitee.io/</id>
  
  <author>
    <name>LuckyChou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手动搭建一个 React / Vue 项目</title>
    <link href="https://luckychou.gitee.io/FE/Tools/webpack-react-vue/"/>
    <id>https://luckychou.gitee.io/FE/Tools/webpack-react-vue/</id>
    <published>2021-04-20T16:00:00.000Z</published>
    <updated>2021-04-22T16:46:59.933Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/LuckyChou710/ReStart-FE/tree/main/webpack-demo">https://github.com/LuckyChou710/ReStart-FE/tree/main/webpack-demo</a></p><details yellow><summary> <p>React dev</p> </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">&#x27;../src/index.js&#x27;</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;../build&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[hash].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mjs|js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [htmlWebpackPlugin],</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> <p>React prod</p> </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 和开发环境下的配置只是修改了 mode</span></span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">&#x27;../src/index.js&#x27;</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;../build&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[hash].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(mjs|js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [htmlWebpackPlugin, <span class="keyword">new</span> CleanWebpackPlugin()],</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.mjs&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> <p>Vue dev</p> </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">&#x27;../main.js&#x27;</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;../build&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[hash].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;vue-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [htmlWebpackPlugin, <span class="keyword">new</span> VueLoaderPlugin()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      vue$: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> <p>Vue prod</p> </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader/lib/plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWebpackPlugin = <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 和开发环境下的配置只是修改了 mode</span></span><br><span class="line">  entry: path.resolve(__dirname, <span class="string">&#x27;../main.js&#x27;</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;../build&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[hash].bundle.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;vue-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [htmlWebpackPlugin, <span class="keyword">new</span> CleanWebpackPlugin(), <span class="keyword">new</span> VueLoaderPlugin()],</span><br><span class="line"></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> <p>package.json</p> </summary>              <div class='content'>              <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;webpack-demo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.13.16&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.13.15&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-react&quot;</span>: <span class="string">&quot;^7.13.13&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;clean-webpack-plugin&quot;</span>: <span class="string">&quot;^4.0.0-alpha.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;4.5.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;react-dom&quot;</span>: <span class="string">&quot;^17.0.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-loader&quot;</span>: <span class="string">&quot;^15.9.6&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-template-compiler&quot;</span>: <span class="string">&quot;^2.6.12&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span>: <span class="string">&quot;4.44.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.11.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start:react&quot;</span>: <span class="string">&quot;webpack-dev-server --config  ./react/config/webpack.config.dev.js --open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:react&quot;</span>: <span class="string">&quot;webpack --config ./react/config/webpack.config.prod.js&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;start:vue&quot;</span>: <span class="string">&quot;webpack-dev-server --config  ./vue/config/webpack.config.dev.js --open&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build:vue&quot;</span>: <span class="string">&quot;webpack --config ./vue/config/webpack.config.prod.js&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/LuckyChou710/ReStart-FE/tree/main/webpack-demo&quot;&gt;https://github.com/LuckyChou710/ReStart-FE/tree/main/web</summary>
      
    
    
    
    <category term="Tools" scheme="https://luckychou.gitee.io/categories/Tools/"/>
    
    
    <category term="Tools" scheme="https://luckychou.gitee.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 重学ES6</title>
    <link href="https://luckychou.gitee.io/FE/JS/es6/"/>
    <id>https://luckychou.gitee.io/FE/JS/es6/</id>
    <published>2021-04-19T16:00:00.000Z</published>
    <updated>2021-04-22T11:09:42.192Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h2><h3 id="globalThis-顶级对象"><a href="#globalThis-顶级对象" class="headerlink" title="globalThis 顶级对象"></a>globalThis 顶级对象</h3><ul><li><p>浏览器里面，顶层对象是 window，但 Node 和 Web Worker 没有 window</p></li><li><p>浏览器和 Web Worker 里面，self 也指向顶层对象，但是 Node 没有 self</p></li><li><p>Node 里面，顶层对象是 global，但其他环境都不支持</p></li></ul><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>按照对应位置，对变量赋值</p><h4 id="解构赋值允许默认值"><a href="#解构赋值允许默认值" class="headerlink" title="解构赋值允许默认值"></a>解构赋值允许默认值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&#x27;b&#x27;</span>] = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">undefined</span>]; <span class="comment">// x=&#x27;a&#x27;, y=&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [x = f()] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>上面的代码不会执行函数 f 输出 aaa 因为该数组解构可以正常取到值 如果代码改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [x = f()] = [];</span><br></pre></td></tr></table></figure><p>此时 会去执行 f 函数 进行默认赋值</p><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>变量必须与属性同名 进行解构</p><h4 id="解构嵌套的对象"><a href="#解构嵌套的对象" class="headerlink" title="解构嵌套的对象"></a>解构嵌套的对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  success: <span class="literal">true</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    username: <span class="string">&#x27;chou&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  code: <span class="number">200</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  data: &#123; username &#125;,</span><br><span class="line">&#125; = obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(username); <span class="comment">// chou</span></span><br></pre></td></tr></table></figure><p>但是如果你要输出 data 此时就会报错 data 变量未定义</p><p>因为此时 data 作为匹配的模式 如果需要将 data 赋值 那么可以写成如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  data,</span><br><span class="line">  data: &#123; username &#125;,</span><br><span class="line">&#125; = obj;</span><br></pre></td></tr></table></figure><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>个人建议使用对象解构的传参方式 例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">&#123; x, y &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add(&#123; x, y &#125;);</span><br></pre></td></tr></table></figure><p>这样就可以规避掉传参时 需要按顺序传参的麻烦 但是使用 TS 的话 就另说啦</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h4 id="遍历-Map-结构"><a href="#遍历-Map-结构" class="headerlink" title="遍历 Map 结构"></a>遍历 Map 结构</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.set(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key + <span class="string">&#x27; is &#x27;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h2><p>ES6 为字符串添加了遍历器接口 使得字符串可以被 for…of 循环遍历</p><p>如果需要引用模板字符串本身，在需要时执行，可以写成函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func = <span class="function">(<span class="params">name</span>) =&gt;</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">func(<span class="string">&#x27;Jack&#x27;</span>); <span class="comment">// &quot;Hello Jack!&quot;</span></span><br></pre></td></tr></table></figure><p>上面代码中，模板字符串写成了一个函数的返回值。执行这个函数，就相当于执行这个模板字符串了。 这看上去很酷<del>~</del></p><h3 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h3><p>标签模板是一种特殊的函数调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`<span class="subst">$&#123;a - b&#125;</span> Hello <span class="subst">$&#123;a + b&#125;</span> world <span class="subst">$&#123;a * b&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: [ <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27; Hello &#x27;</span>, <span class="string">&#x27; world &#x27;</span>, <span class="string">&#x27;&#x27;</span> ],</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: -<span class="number">5</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="number">15</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="number">50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="padStart-，padEnd"><a href="#padStart-，padEnd" class="headerlink" title="padStart()，padEnd()"></a>padStart()，padEnd()</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>); <span class="comment">// &#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padStart(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>); <span class="comment">// &#x27;abax&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">5</span>, <span class="string">&#x27;ab&#x27;</span>); <span class="comment">// &#x27;xabab&#x27;</span></span><br><span class="line"><span class="string">&#x27;x&#x27;</span>.padEnd(<span class="number">4</span>, <span class="string">&#x27;ab&#x27;</span>); <span class="comment">// &#x27;xaba&#x27;</span></span><br></pre></td></tr></table></figure><p>例如 可以用于时间格式化 比如 时分秒如果需要两位 不足两位补 0</p><h2 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h4><p>Math.trunc 方法用于去除一个数的小数部分，返回整数部分</p><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><ul><li><p>BigInt 只用来表示整数，没有位数的限制，任何位数的整数都可以精确表示</p></li><li><p>为了与 Number 类型区别，BigInt 类型的数据必须添加后缀 n</p></li><li><p>BigInt 与普通整数是两种值，它们之间并不相等</p></li><li><p>BigInt 可以使用负号（-），但是不能使用正号（+）</p></li><li><p>数学运算方面，BigInt 类型的+、-、*和**这四个二元运算符，与 Number 类型的行为一致。除法运算/会舍去小数部分，返回一个整数</p></li><li><p>BigInt 对应的布尔值，与 Number 类型一致，即 0n 会转为 false，其他值转为 true</p></li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的属性"><a href="#函数的属性" class="headerlink" title="函数的属性"></a>函数的属性</h3><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>函数的 length 属性将返回函数的参数个数 但是这个属性也不总是准确的 在函数参数指定默认值后 这个参数就不会被 length 考虑其中</p><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p>函数的 name 属性，返回该函数的函数名</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>如果箭头函数直接返回一个对象，必须在对象外面加上括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getTempItem = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&#x27;Temp&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>（1）函数体内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。</p><p>（3）不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</p><h2 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h2><h3 id="ES6-明确将空位转为-undefined"><a href="#ES6-明确将空位转为-undefined" class="headerlink" title="ES6 明确将空位转为 undefined"></a>ES6 明确将空位转为 undefined</h3><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>还可以接受第二个参数，作用类似于数组的 map 方法，用来对每个元素进行处理，将处理后的值放入返回的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;, <span class="function">(<span class="params">item, idx</span>) =&gt;</span> idx + <span class="number">1</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h3 id="改变数组自身的方法"><a href="#改变数组自身的方法" class="headerlink" title="改变数组自身的方法"></a>改变数组自身的方法</h3><img src="https://gitee.com/LuckyChou/blog-images/raw/master/js/data-type/array.png" /><h2 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h2><h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><p>ES6 后 支持 属性名是一个表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="keyword">new</span> <span class="built_in">Date</span>()]: <span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>Object.assign 同名属性会被后者覆盖而不是合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]); <span class="comment">// [4, 5, 3]</span></span><br></pre></td></tr></table></figure><p>可以简化操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class="line"><span class="function"><span class="title">someMethod</span>(<span class="params">arg1, arg2</span>)</span> &#123;</span><br><span class="line">···</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">anotherMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">···</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 等同于下面的写法</span></span><br><span class="line">SomeClass.prototype.someMethod = <span class="function"><span class="keyword">function</span> (<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">···</span><br><span class="line">&#125;;</span><br><span class="line">SomeClass.prototype.anotherMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">···</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h3><p>Object.fromEntries()方法是 Object.entries()的逆操作，用于将一个键值对数组转为对象。<br>该方法的主要目的，是将键值对的数据结构还原为对象，因此特别适合将 Map 结构转为对象。</p><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><p>Symbol 无法被隐式的转换成字符串 如下代码会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol = <span class="built_in">Symbol</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">symbol + <span class="string">&#x27;world; // Uncaught TypeError: Cannot convert a Symbol value to a string</span></span><br></pre></td></tr></table></figure><p>但是可以显示的转换为 string 和 布尔值 无法转换成数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">symbol.toString(); <span class="comment">// &quot;Symbol(hello)&quot;</span></span><br><span class="line">!!symbol; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h3><p>返回描述</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">sym.description; <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-for-Symbol-keyFor"><a href="#Symbol-for-Symbol-keyFor" class="headerlink" title="Symbol.for / Symbol.keyFor"></a>Symbol.for / Symbol.keyFor</h3><p>非常适合单例模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个已登记的Symbol 如果没有登记就注册一个</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">s1 === s2; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个已登记 Symbol 的 key</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s1); <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="built_in">Symbol</span>.keyFor(s2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="消除魔法字符串"><a href="#消除魔法字符串" class="headerlink" title="消除魔法字符串"></a>消除魔法字符串</h3><h2 id="Set-Map"><a href="#Set-Map" class="headerlink" title="Set / Map"></a>Set / Map</h2><p>ES6 提供了新的数据结构 Set / Map 成员的值都是唯一的</p><p>内部使用精确相等 NaN 会等于自身 +0 和-0 都会变成 0</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li><p>size -&gt; 长度</p></li><li><p>add 添加 -&gt; Set / Map 链式调用</p></li><li><p>delete 删除 -&gt; boolean</p></li><li><p>clear 清空 -&gt; void</p></li><li><p>has -&gt; boolean</p></li></ul><h3 id="WeakSet-WeakMap"><a href="#WeakSet-WeakMap" class="headerlink" title="WeakSet / WeakMap"></a>WeakSet / WeakMap</h3><ul><li><p>成员 / 键名必须是对象</p></li><li><p>这些对象都是弱引用 如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内</p></li></ul><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写</p><p>Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="function"><span class="title">set</span>(<span class="params">obj, prop, value</span>)</span> &#123;</span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;prop&#125;</span>属性的set方法执行了`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">obj, prop</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;prop&#125;</span>属性的get方法执行了`</span>);</span><br><span class="line">    <span class="keyword">return</span> obj[prop];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">has</span>(<span class="params">obj, key</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;has方法执行了&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, handler);</span><br><span class="line">obj.name = <span class="string">&#x27;chou&#x27;</span>;</span><br><span class="line">obj.age = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj);</span><br><span class="line"><span class="comment">// output</span></span><br><span class="line"><span class="comment">// name属性的set方法执行了</span></span><br><span class="line"><span class="comment">// age属性的set方法执行了</span></span><br><span class="line"><span class="comment">// name属性的get方法执行了</span></span><br><span class="line"><span class="comment">// chou</span></span><br><span class="line"><span class="comment">// has方法执行了</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><h3 id="Reflect-ownKeys"><a href="#Reflect-ownKeys" class="headerlink" title="Reflect.ownKeys"></a>Reflect.ownKeys</h3><p>Reflect.ownKeys 方法用于返回对象的所有属性，基本等同于 Object.getOwnPropertyNames 与 Object.getOwnPropertySymbols 之和</p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h3><p>在所有异步操作都执行完毕后 执行的回调</p><p>有时候，我们不关心异步操作的结果，只关心这些操作有没有结束。</p><p>这时，Promise.allSettled()方法就很有用。如果没有这个方法，想要确保所有操作都结束，就很麻烦。Promise.all()方法无法做到这一点。</p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">helloWorldGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;ending&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hw = helloWorldGenerator();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hw.next()); <span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(hw.next()); <span class="comment">// &#123; value: &#x27;world&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(hw.next()); <span class="comment">// &#123; value: &#x27;ending&#x27;, done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(hw.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Generator-与状态机-真的非常优雅"><a href="#Generator-与状态机-真的非常优雅" class="headerlink" title="Generator 与状态机 (真的非常优雅)"></a>Generator 与状态机 (真的非常优雅)</h3><p>传统的 Tick Tock 状态机 （会受到外部 ticking 状态的影响）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ticking = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> clock = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ticking) <span class="built_in">console</span>.log(<span class="string">&#x27;Tick!&#x27;</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Tock!&#x27;</span>);</span><br><span class="line">  ticking = !ticking;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用 generator 函数改造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clock = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Tick!&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Tock!&#x27;</span>);</span><br><span class="line">    <span class="keyword">yield</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">重新看了一遍阮一峰老师的 ES6 摘录一些收获</summary>
    
    
    
    <category term="JS篇" scheme="https://luckychou.gitee.io/categories/JS%E7%AF%87/"/>
    
    
    <category term="JavaScript" scheme="https://luckychou.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器缓存</title>
    <link href="https://luckychou.gitee.io/FE/Browser/cache/"/>
    <id>https://luckychou.gitee.io/FE/Browser/cache/</id>
    <published>2021-04-13T16:00:00.000Z</published>
    <updated>2021-04-15T07:44:55.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://www.yuque.com/suihangadam/liulanqi/gcmgi4">https://www.yuque.com/suihangadam/liulanqi/gcmgi4</a></p></blockquote><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。</p><h2 id="简单释义"><a href="#简单释义" class="headerlink" title="简单释义"></a>简单释义</h2><p>浏览器缓存其实就是浏览器保存通过 HTTP 获取的所有资源,是浏览器将网络资源存储在本地的一种行为。浏览器的缓存机制是根据 HTTP 报文的缓存标识进行的。</p><h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>通常浏览器缓存策略分为两种：强缓存（<strong>Expires</strong>，<strong>cache-control</strong>）和协商缓存（<strong>last-modified</strong> ，<strong>Etag</strong>），并且缓存策略都是通过设置 HTTP Header 来实现的。</p><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>response header 里的过期时间，浏览器再次加载资源时，如果在这个过期时间内，则命中强制缓存。</p><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>当值设为 max-age=300 时，则代表在这个请求正确返回时间（浏览器也会记录下来）的 5 分钟内再次加载资源，就会命中强缓存。</p><p><img src="https://gitee.com/LuckyChou/blog-images/raw/master/browser/browser1.png" alt="image"></p><a id="more"></a><h4 id="Expires-和-Cache-Control-的区别"><a href="#Expires-和-Cache-Control-的区别" class="headerlink" title="Expires 和 Cache-Control 的区别"></a>Expires 和 Cache-Control 的区别</h4><ol><li>Expires 是 http1.0 的产物，Cache-Control 是 http1.1 的产物</li><li>两者同时存在的话，Cache-Control 优先级高于 Expires；</li><li>在某些不支持 HTTP1.1 的环境下，Expires 就会发挥用处。所以 Expires 其实是过时的产物，现阶段它的存在只是一种兼容性的写法</li><li>Expires 是一个具体的服务器时间，这就导致一个问题，如果客户端时间和服务器时间相差较大，缓存命中与否就不是开发者所期望的。Cache-Control 是一个时间段，控制就比较容易</li></ol><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a><strong>协商缓存</strong></h3><h4 id="ETag-和-If-None-Match"><a href="#ETag-和-If-None-Match" class="headerlink" title="ETag 和 If-None-Match"></a>ETag 和 If-None-Match</h4><p>这两个要一起说。Etag 是上一次加载资源时，服务器返回的 response header，是对该资源的一种唯一标识，只要资源有变化，Etag 就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 Etag 值放到 request header 里的 If-None-Match 里，服务器接受到 If-None-Match 的值后，会拿来跟该资源文件的 Etag 值做比较，如果相同，则表示资源文件没有发生改变，命中协商缓存。<img src="https://gitee.com/LuckyChou/blog-images/raw/master/browser/browser2.png" alt="image"></p><h4 id="Last-Modified-和-If-Modified-Since"><a href="#Last-Modified-和-If-Modified-Since" class="headerlink" title="Last-Modified 和 If-Modified-Since"></a>Last-Modified 和 If-Modified-Since</h4><p>这两个也要一起说。Last-Modified 是该资源文件最后一次更改时间，服务器会在 response header 里返回，同时浏览器会将这个值保存起来，在下一次发送请求时，放到 request header 里的 If-Modified-Since 里，服务器在接收到后也会做比对，如果相同则命中协商缓存。</p><p><img src="https://gitee.com/LuckyChou/blog-images/raw/master/browser/browser3.png" alt="image"></p><h4 id="ETag-和-Last-Modified-区别"><a href="#ETag-和-Last-Modified-区别" class="headerlink" title="ETag 和 Last-Modified 区别"></a>ETag 和 Last-Modified 区别</h4><ol><li>在方式上，Etag 是对资源的一种唯一标识，而 Last-Modified 是该资源文件最后一次更改时间</li><li>在精确度上，Etag 要优于 Last-Modified。Last-Modified 的时间单位是秒，如果某个文件在 1 秒内改变了多次，那么他们的 Last-Modified 其实并没有体现出来修改，但是 Etag 每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的 Last-Modified 也有可能不一致。</li><li>在性能上，Etag 要逊于 Last-Modified，毕竟 Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash 值。</li><li>在优先级上，服务器校验优先考虑 Etag。</li></ol><h2 id="浏览器缓存过程"><a href="#浏览器缓存过程" class="headerlink" title="浏览器缓存过程"></a>浏览器缓存过程</h2><ol><li>浏览器第一次加载资源，服务器返回 200，浏览器将资源文件从服务器上请求下载下来，并把 response header 及该请求的返回时间一并缓存；</li><li>下一次加载资源时，先比较当前时间和上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，命中强缓存，不发请求直接从本地缓存读取该文件（如果浏览器不支持 HTTP1.1，则用 expires 判断是否过期）；如果时间过期，则向服务器发送 header 带有 If-None-Match 和 If-Modified-Since 的请求；</li><li>服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</li><li>如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；</li></ol><p><img src="https://gitee.com/LuckyChou/blog-images/raw/master/browser/browser4.png" alt="image.png"></p><h2 id="存储位置"><a href="#存储位置" class="headerlink" title="存储位置"></a>存储位置</h2><p>从存储位置来看，浏览器缓存一共分为四种，并且各自有优先级，当依次查找缓存且都没有命中的时候，才会去请求网络。</p><ul><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ul><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能。使用 Service Worker 的话，传输协议必须为 HTTPS。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。<strong>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的。</strong></p><p>Service Worker 实现缓存功能一般分为三个步骤：</p><ol><li>首先需要先注册 Service Worker</li><li>然后监听到 install 事件以后就可以缓存需要的文件</li><li>那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。</li></ol><p>当 Service Worker 没有命中缓存的时候，我们需要去调用 fetch 函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。但是不管我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。</p><h3 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h3><p>Memory Cache 也就是内存中的缓存，主要包含的是当前中页面中已经抓取到的资源,例如页面上已经下载的样式、脚本、图片等。读取内存中的数据肯定比磁盘快,内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。 <strong>一旦我们关闭 Tab 页面，内存中的缓存也就被释放了</strong>。</p><p>⚠️：<strong>内存缓存在缓存资源时并不关心返回资源的 HTTP 缓存头 Cache-Control 是什么值，同时资源的匹配也并非仅仅是对 URL 做匹配，还可能会对 Content-Type，CORS 等其他特征做校验</strong>。</p><h3 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h3><p>Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，<strong>比之 Memory Cache 胜在容量和存储时效性上。</strong>它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。绝大部分的缓存都来自 Disk Cache。</p><h3 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h3><p>Push Cache（推送缓存）是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。<strong>它只在会话（Session）中存在，一旦会话结束就被释放，并且缓存时间也很短暂，在 Chrome 浏览器中只有 5 分钟左右</strong>，同时它也并非严格执行 HTTP 头中的缓存指令。他有如下的一些特性：</p><ul><li><p>所有的资源都能被推送，并且能够被缓存,但是 Edge 和 Safari 浏览器支持相对比较差。</p></li><li><p>Push Cache 中的缓存只能被使用一次</p></li><li><p>可以给其他域名推送资源</p></li><li><p>浏览器可以拒绝接受已经存在的资源推送</p></li><li><p>一旦连接被关闭，Push Cache 就被释放</p></li><li><p>可以推送 no-cache 和 no-store 的资源</p></li><li><p>多个页面可以使用同一个 HTTP/2 的连接，也就可以使用同一个 Push Cache。这主要还是依赖浏览器的实现而定，出于对性能的考虑，有的浏览器会对相同域名但不同的 tab 标签使用同一个 HTTP 连接。</p></li></ul><h2 id="用户行为对浏览器缓存的控制"><a href="#用户行为对浏览器缓存的控制" class="headerlink" title="用户行为对浏览器缓存的控制"></a>用户行为对浏览器缓存的控制</h2><ol><li>地址栏访问，链接跳转是正常用户行为，将会触发浏览器缓存机制；</li><li>F5 刷新，浏览器会设置 max-age=0，跳过强缓存判断，会进行协商缓存判断；</li><li>ctrl+F5 刷新，跳过强缓存和协商缓存，直接从服务器拉取资源。</li></ol><h2 id="三级缓存原理-访问缓存优先级"><a href="#三级缓存原理-访问缓存优先级" class="headerlink" title="三级缓存原理 (访问缓存优先级)"></a>三级缓存原理 (访问缓存优先级)</h2><ol><li>先在内存中查找,如果有,直接加载。</li><li>如果内存中不存在,则在硬盘中查找,如果有直接加载。</li><li>如果硬盘中也没有,那么就进行网络请求。</li><li>请求获取的资源缓存到硬盘和内存。</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="内存缓存和硬盘缓存有什么区别？"><a href="#内存缓存和硬盘缓存有什么区别？" class="headerlink" title="内存缓存和硬盘缓存有什么区别？"></a>内存缓存和硬盘缓存有什么区别？</h3><blockquote><p>口诀：存速时空（存的速食都被我吃空了）</p></blockquote><table><thead><tr><th>区别</th><th>内存缓存</th><th>硬盘缓存</th></tr></thead><tbody><tr><td>存储内容</td><td>JS，字体，图片等</td><td>CSS 等</td></tr><tr><td>读取速度</td><td>快</td><td>慢</td></tr><tr><td>时效性</td><td>进程关闭则清空</td><td>可以缓存较长时间</td></tr><tr><td>空间</td><td>空间小</td><td>空间大</td></tr></tbody></table><p>1.**内存缓存(from memory cache)**：内存缓存主要的两个特点，分别是快速读取和时效性：</p><ul><li><p>快速读取：内存缓存会将编译解析后的文件，直接存入该进程的内存中，占据该进程一定的内存资源，以方便下次运行使用时的快速读取。一般 JS,字体，图片等会放在内存缓存中</p></li><li><p>时效性：一旦该进程关闭，则该进程的内存则会清空。</p><p>2.**硬盘缓存(from disk cache)**：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行 I/O 操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。退出进程不会清空。一般 JS,字体，图片等会放在内存中，而 CSS 则会放在硬盘缓存中</p></li></ul><h3 id="浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？"><a href="#浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？" class="headerlink" title="浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？"></a>浏览器的缓存存放在哪里，如何在浏览器中判断强制缓存是否生效？</h3><p>判断是否命中强制缓存：当命中强制缓存时，状态码为 200, 请求对应的 Size 值则代表该缓存存放的位置，分别为 from memory cache 和 from disk cache。from memory cache 代表使用内存中的缓存，from disk cache 则代表使用的是硬盘中的缓存，浏览器读取缓存的顺序为 memory &gt; disk。</p><h3 id="为什么-CSS-会放在硬盘缓存中？"><a href="#为什么-CSS-会放在硬盘缓存中？" class="headerlink" title="为什么 CSS 会放在硬盘缓存中？"></a>为什么 CSS 会放在硬盘缓存中？</h3><p>因为 CSS 文件加载一次就可渲染出来,我们不会频繁读取它,所以它不适合缓存到内存中,但是 js 之类的脚本却随时可能会执行,如果脚本在磁盘当中,我们在执行脚本的时候需要从磁盘取到内存中来,这样 IO 开销就很大了,有可能导致浏览器失去响应。</p><h3 id="那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？"><a href="#那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？" class="headerlink" title="那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？"></a>那么既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？</h3><p>这是不可能的。计算机中的内存一定比硬盘容量小得多，操作系统需要精打细算内存的使用，所以能让我们使用的内存必然不多。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://www.yuque.com/suihangadam/liulanqi/gcmgi4&quot;&gt;https://www.yuque.com/suihangadam/liulanqi/gcmgi4&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览。&lt;/p&gt;
&lt;h2 id=&quot;简单释义&quot;&gt;&lt;a href=&quot;#简单释义&quot; class=&quot;headerlink&quot; title=&quot;简单释义&quot;&gt;&lt;/a&gt;简单释义&lt;/h2&gt;&lt;p&gt;浏览器缓存其实就是浏览器保存通过 HTTP 获取的所有资源,是浏览器将网络资源存储在本地的一种行为。浏览器的缓存机制是根据 HTTP 报文的缓存标识进行的。&lt;/p&gt;
&lt;h2 id=&quot;策略&quot;&gt;&lt;a href=&quot;#策略&quot; class=&quot;headerlink&quot; title=&quot;策略&quot;&gt;&lt;/a&gt;策略&lt;/h2&gt;&lt;p&gt;通常浏览器缓存策略分为两种：强缓存（&lt;strong&gt;Expires&lt;/strong&gt;，&lt;strong&gt;cache-control&lt;/strong&gt;）和协商缓存（&lt;strong&gt;last-modified&lt;/strong&gt; ，&lt;strong&gt;Etag&lt;/strong&gt;），并且缓存策略都是通过设置 HTTP Header 来实现的。&lt;/p&gt;
&lt;h3 id=&quot;强制缓存&quot;&gt;&lt;a href=&quot;#强制缓存&quot; class=&quot;headerlink&quot; title=&quot;强制缓存&quot;&gt;&lt;/a&gt;强制缓存&lt;/h3&gt;&lt;h4 id=&quot;Expires&quot;&gt;&lt;a href=&quot;#Expires&quot; class=&quot;headerlink&quot; title=&quot;Expires&quot;&gt;&lt;/a&gt;Expires&lt;/h4&gt;&lt;p&gt;response header 里的过期时间，浏览器再次加载资源时，如果在这个过期时间内，则命中强制缓存。&lt;/p&gt;
&lt;h4 id=&quot;Cache-Control&quot;&gt;&lt;a href=&quot;#Cache-Control&quot; class=&quot;headerlink&quot; title=&quot;Cache-Control&quot;&gt;&lt;/a&gt;Cache-Control&lt;/h4&gt;&lt;p&gt;当值设为 max-age=300 时，则代表在这个请求正确返回时间（浏览器也会记录下来）的 5 分钟内再次加载资源，就会命中强缓存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/LuckyChou/blog-images/raw/master/browser/browser1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Browser" scheme="https://luckychou.gitee.io/categories/Browser/"/>
    
    
    <category term="Browser" scheme="https://luckychou.gitee.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>React小册 -- 生命周期</title>
    <link href="https://luckychou.gitee.io/FE/React/lifecycle/"/>
    <id>https://luckychou.gitee.io/FE/React/lifecycle/</id>
    <published>2021-04-12T16:00:00.000Z</published>
    <updated>2021-04-25T11:24:05.796Z</updated>
    
    <content type="html"><![CDATA[<h3 id="React-15"><a href="#React-15" class="headerlink" title="React 15"></a>React 15</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">constructor()</span><br><span class="line">componentWillReceiveProps() -- 过时</span><br><span class="line">shouldComponentUpdate()</span><br><span class="line">componentWillMount() -- 过时</span><br><span class="line">componentWillUpdate() -- 过时</span><br><span class="line">componentDidUpdate()</span><br><span class="line">componentDidMount()</span><br><span class="line">render()</span><br><span class="line">componentWillUnmount()</span><br></pre></td></tr></table></figure><h3 id="React-16"><a href="#React-16" class="headerlink" title="React 16"></a>React 16</h3><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">React16 生命周期图谱</a></p><p>在 React16 前 React 采用同步渲染的方式 每次组件更新 都会构建一颗新的 dom 树 然后进行 diff 实现对 dom 的定向更新</p><p>但是这个过程 是一个十分耗时的递归过程</p><p>有可能在这个期间 用户都无法进行任何的操作 因为这个过程抢占了主线程 浏览器无法响应其他任何操作</p><p>而 React16 用 Fiber 架构重写了核心算法</p><p>将同步渲染改为了异步渲染</p><p>查看生命周期图谱左侧 可以看到生命周期又被分为了三个阶段</p><ul><li><p>render 阶段：纯净且没有副作用，可能会被 React 暂停、终止或重新启动</p></li><li><p>pre-commit 阶段：可以读取 DOM</p></li><li><p>commit 阶段：可以使用 DOM，运行副作用，安排更新</p></li></ul><p>用户感知到是 commit 阶段 所以这个阶段始终使用同步渲染 避免任何异步渲染带来的风险</p><p>而 render 阶段则会将一个大的更新任务拆解为许多个小任务</p><p>每当执行完一个小任务时，渲染线程都会把主线程交回去，看看有没有优先级更高的工作要处理，确保不会出现其他任务被“饿死”的情况，进而避免同步渲染带来的卡顿</p><p>因为 render 阶段的生命周期有可能被打断重新执行 所以在 render 阶段的生命周期就变得不那么”安全“了</p><p>回过头来 看看 react15 有哪些生命周期位于 render 阶段</p><ul><li><p>componentWillMount</p></li><li><p>componentWillUpdate</p></li><li><p>componentWillRecevieProps</p></li></ul><p>因为它们阻碍了 Fiber 架构 所以在 React16 中将其弃用</p><p>并且把新增的 getDerivedStateFromProps 用 static 修饰，阻止用户在其内部使用 this</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;React-15&quot;&gt;&lt;a href=&quot;#React-15&quot; class=&quot;headerlink&quot; title=&quot;React 15&quot;&gt;&lt;/a&gt;React 15&lt;/h3&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla</summary>
      
    
    
    
    <category term="React" scheme="https://luckychou.gitee.io/categories/React/"/>
    
    
    <category term="React" scheme="https://luckychou.gitee.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React小册 -- 性能优化</title>
    <link href="https://luckychou.gitee.io/FE/React/performance/"/>
    <id>https://luckychou.gitee.io/FE/React/performance/</id>
    <published>2021-04-12T16:00:00.000Z</published>
    <updated>2021-05-04T15:46:13.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><p>本文主要讲解如下五个方法来做性能优化</p><ul><li><p>shouldComponentUpdate</p></li><li><p>memo</p></li><li><p>PureComponent</p></li><li><p>useMemo</p></li><li><p>useCallback</p></li></ul><p>先来说一下为什么要做性能优化 有哪些地方需要去做性能优化</p><p>我们知道组件通信是组件化之中不可缺少的内容 而一旦父组件更新了 那么子组件就必将更新</p><p>但是如果父组件更新的 props 不是子组件所需要的 这样每次父组件更新带来的子组件更新显然就是不必要的</p><p>本文的所有 demo 都使用 ts 来书写</p><h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><p>shouldComponentUpdate 接受两个参数 改变后的 props 和 state 返回值是一个 boolean 决定是否要更新数据</p><p>通过对比该生命周期的入参和该组件中实际需要的 props 和 state 有无改变就可以手动控制组件是否更新</p><p>demo 如下 父组件内部有两个状态 arr 和 str 子组件实际需要的只是 str 但是如果父组件更新了内部的 arr 也会带来子组件的更新</p><p>这个时候就可以在子组件内部使用该生命周期函数来优化性能</p><details yellow><summary> <p>ts shouldComponentUpdate</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button, Tag &#125; from &#39;antd&#39;;</span><br><span class="line">import React, &#123; Component &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  arr?: Array&lt;number&gt;;</span><br><span class="line">  str?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  arr: Array&lt;number&gt;;</span><br><span class="line">  str: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Component&lt;IProps, Partial&lt;IState&gt;&gt; &#123;</span><br><span class="line">  constructor(props: IProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#39;子组件更新了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate(nextProps: IProps, nextState: IState) &#123;</span><br><span class="line">    if (nextProps.str &#x3D;&#x3D;&#x3D; this.props.str) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子组件&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.props.str&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Parent extends Component&lt;IProps, IState&gt; &#123;</span><br><span class="line">  constructor(props: IProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      arr: [1, 2, 3],</span><br><span class="line">      str: &#39;hello&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#39;父组件更新了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;父组件&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;this.state.arr!.map((item, idx) &#x3D;&gt; &#123;</span><br><span class="line">          return &lt;Tag key&#x3D;&#123;idx&#125;&gt;&#123;item&#125;&lt;&#x2F;Tag&gt;;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">              arr: [...this.state.arr, this.state.arr.length + 1],</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;</span><br><span class="line">          改变子组件不需要的属性</span><br><span class="line">        &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; this.setState(&#123; str: &#39;world&#39; &#125;)&#125;&gt;</span><br><span class="line">          改变子组件需要的属性</span><br><span class="line">        &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Child str&#x3D;&#123;this.state.str&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h3><p>React 内部预制了该组件来帮助我们进行性能优化 理论上所有继承自 React.Component 的组件都可以改写成继承 PureComponent 来提升性能</p><p>但是需要注意的是 一旦你的组件继承自该组件 那么就不能在你的组件中 实现 shouldComponentUpdate 这个生命周期函数了 不然你大概会在控制台上看到 React 给你的警告了</p><p>PureComponent 会自动的去对比该组件前后的 props 有无更新 从而决定组件是否要更新</p><details yellow><summary> <p>ts PureComponent</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button, Tag &#125; from &#39;antd&#39;;</span><br><span class="line">import React, &#123; Component, PureComponent &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  arr?: Array&lt;number&gt;;</span><br><span class="line">  str?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface IState &#123;</span><br><span class="line">  arr: Array&lt;number&gt;;</span><br><span class="line">  str: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child extends Component&lt;IProps, Partial&lt;IState&gt;&gt; &#123;</span><br><span class="line">  constructor(props: IProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#39;使用Component子组件更新了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子组件&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.props.str&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class PureChild extends PureComponent&lt;IProps, Partial&lt;IState&gt;&gt; &#123;</span><br><span class="line">  constructor(props: IProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#39;使用PureComponent子组件更新了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;子组件&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h2&gt;&#123;this.props.str&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Parent extends Component&lt;IProps, IState&gt; &#123;</span><br><span class="line">  constructor(props: IProps) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state &#x3D; &#123;</span><br><span class="line">      arr: [1, 2, 3],</span><br><span class="line">      str: &#39;hello&#39;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate() &#123;</span><br><span class="line">    console.log(&#39;父组件更新了&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;父组件&lt;&#x2F;h1&gt;</span><br><span class="line">        &#123;this.state.arr!.map((item, idx) &#x3D;&gt; &#123;</span><br><span class="line">          return &lt;Tag key&#x3D;&#123;idx&#125;&gt;&#123;item&#125;&lt;&#x2F;Tag&gt;;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">        &lt;br &#x2F;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">          onClick&#x3D;&#123;() &#x3D;&gt;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">              arr: [...this.state.arr, this.state.arr.length + 1],</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &gt;</span><br><span class="line">          改变子组件不需要的属性</span><br><span class="line">        &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; this.setState(&#123; str: &#39;world&#39; &#125;)&#125;&gt;</span><br><span class="line">          改变子组件需要的属性</span><br><span class="line">        &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Child str&#x3D;&#123;this.state.str&#125; &#x2F;&gt;</span><br><span class="line">        &lt;PureChild str&#x3D;&#123;this.state.str&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><p>和上一个 PureComponent 一样 该方法用于函数式组件 demo 如下</p><details yellow><summary> <p>ts memo</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button, Tag &#125; from &#39;antd&#39;;</span><br><span class="line">import React, &#123; useState, useEffect, memo &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  arr?: Array&lt;number&gt;;</span><br><span class="line">  str?: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Child &#x3D; (props: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;不使用memo的子组件更新了&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;子组件&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.str&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">const MemoChild &#x3D; memo((props: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;memo子组件更新了&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;子组件&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;&#123;props.str&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Parent &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [str, setStr] &#x3D; useState&lt;string&gt;(&#39;hello&#39;);</span><br><span class="line">  const [arr, setArr] &#x3D; useState&lt;Array&lt;number&gt;&gt;([1, 2, 3]);</span><br><span class="line"></span><br><span class="line">  useEffect(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;父组件更新了&#39;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;父组件&lt;&#x2F;h1&gt;</span><br><span class="line">      &#123;arr.map((item, idx) &#x3D;&gt; &#123;</span><br><span class="line">        return &lt;Tag key&#x3D;&#123;idx&#125;&gt;&#123;item&#125;&lt;&#x2F;Tag&gt;;</span><br><span class="line">      &#125;)&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setArr([...arr, arr.length + 1])&#125;&gt;</span><br><span class="line">          改变子组件不需要的属性</span><br><span class="line">        &lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setStr(&#39;world&#39;)&#125;&gt;改变子组件需要的属性&lt;&#x2F;Button&gt;</span><br><span class="line">        &lt;Child str&#x3D;&#123;str&#125; &#x2F;&gt;</span><br><span class="line">        &lt;MemoChild str&#x3D;&#123;str&#125; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>接着来说 memo 我们知道对象是引用数据类型 任意两个不指向同一个地址的两个对象进行对比都会返回 false</p><p>所以如果子组件接受了来自父组件的属性是一个对象 那么不管如何 每当父组件更新 子组件都会跟着更新</p><p>因为 memo 在每次对比前后 props 时 总会返回 false 这个时候就需要使用 useMemo 来对这个对象进行包装了</p><p>useMemo 接收两个参数</p><ul><li><p>第一个参数 是一个函数 返回一个对象</p></li><li><p>第二个参数 是一个数组 包含了这个对象的依赖项 只有依赖项更新 函数才会重新执行 从而去更新这个对象</p></li></ul><p>demo 如下</p><details yellow><summary> <p>ts memo</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">import React, &#123; useState, useMemo, memo &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  age?: number;</span><br><span class="line">  stu?: &#123; name: string; age: number &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 接收的是基本数据类型 memo生效</span><br><span class="line">const Child &#x3D; memo((&#123; age &#125;: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;props为基本数据类型的子组件渲染了&#39;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;props为基本数据类型&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;age:&#123;age&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父组件中没有使用useMemo 子组件的memo失效</span><br><span class="line">const Child1 &#x3D; memo((&#123; stu &#125;: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;props为引用数据类型 未使用useMemo&#39;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;props为引用数据类型 未使用useMemo&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;</span><br><span class="line">        &#123;stu?.name&#125;:&#123;stu?.age&#125;</span><br><span class="line">      &lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 父组件中使用了useMemo 子组件的memo生效</span><br><span class="line">const Child2 &#x3D; memo((&#123; stu &#125;: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;props为引用数据类型 使用useMemo&#39;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;props为引用数据类型 使用useMemo&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;h2&gt;</span><br><span class="line">        &#123;stu?.name&#125;:&#123;stu?.age&#125;</span><br><span class="line">      &lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Parent &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [count, setCount] &#x3D; useState(0);</span><br><span class="line">  const [age, setAge] &#x3D; useState(18);</span><br><span class="line">  const [name, setName] &#x3D; useState(&#39;lucky&#39;);</span><br><span class="line"></span><br><span class="line">  const stu1 &#x3D; &#123;</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const stu2 &#x3D; useMemo(</span><br><span class="line">    () &#x3D;&gt; (&#123;</span><br><span class="line">      name,</span><br><span class="line">      age,</span><br><span class="line">    &#125;),</span><br><span class="line">    [age]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Child age&#x3D;&#123;age&#125; &#x2F;&gt;</span><br><span class="line">      &lt;Child1 stu&#x3D;&#123;stu1&#125; &#x2F;&gt;</span><br><span class="line">      &lt;Child2 stu&#x3D;&#123;stu2&#125; &#x2F;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;count&#125;&lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setCount(count + 1)&#125;&gt;change count&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setAge(age + 1)&#125;&gt;change age&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setName(&#39;lucky chou&#39;)&#125;&gt;change name&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>和 useMemo 类似 该 hook 用来做 props 为函数时的性能优化 避免每次都重新执行该函数</p><p>demo 如下</p><details yellow><summary> <p>ts memo</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Button &#125; from &#39;antd&#39;;</span><br><span class="line">import React, &#123; useState, useCallback, memo &#125; from &#39;react&#39;;</span><br><span class="line"></span><br><span class="line">interface IProps &#123;</span><br><span class="line">  getSum: () &#x3D;&gt; number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Child1 &#x3D; memo((&#123; getSum &#125;: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;我是子组件 在父组件中没使用useCallback&#39;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;getSum&#125;&gt;没使用useCallback&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Child2 &#x3D; memo((&#123; getSum &#125;: IProps) &#x3D;&gt; &#123;</span><br><span class="line">  console.log(&#39;我是子组件 在父组件中使用了useCallback&#39;);</span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;getSum&#125;&gt;使用了useCallback&lt;&#x2F;Button&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Parent &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const [num, setNum] &#x3D; useState(0);</span><br><span class="line">  const [max, setMax] &#x3D; useState(100);</span><br><span class="line"></span><br><span class="line">  const getSum1 &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;getSum1方法执行了&#39;);</span><br><span class="line">    let sum &#x3D; 0;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; max; i++) &#123;</span><br><span class="line">      sum +&#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  const getSum2 &#x3D; useCallback(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;getSum2方法执行了&#39;);</span><br><span class="line">    let sum &#x3D; 0;</span><br><span class="line">    for (let i &#x3D; 0; i &lt; max; i++) &#123;</span><br><span class="line">      sum +&#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">  &#125;, [max]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;sum : &#123;getSum1()&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;sum : &#123;getSum2()&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;num : &#123;num&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setNum(num + 1)&#125;&gt;change num&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;Button onClick&#x3D;&#123;() &#x3D;&gt; setMax((pre) &#x3D;&gt; pre * 2)&#125;&gt;change max&lt;&#x2F;Button&gt;</span><br><span class="line">      &lt;Child1 getSum&#x3D;&#123;getSum1&#125; &#x2F;&gt;</span><br><span class="line">      &lt;Child2 getSum&#x3D;&#123;getSum2&#125; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Parent;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;p&gt;本文主要讲解如下五个方法来做性能优化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;shouldComponentUpdate&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="React" scheme="https://luckychou.gitee.io/categories/React/"/>
    
    
    <category term="React" scheme="https://luckychou.gitee.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Mock.js</title>
    <link href="https://luckychou.gitee.io/FE/JS/mock/"/>
    <id>https://luckychou.gitee.io/FE/JS/mock/</id>
    <published>2021-04-11T16:00:00.000Z</published>
    <updated>2021-04-14T10:16:15.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成随机-json"><a href="#生成随机-json" class="headerlink" title="生成随机 json"></a>生成随机 json</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Mock.mock(&#123;</span><br><span class="line">  <span class="string">&#x27;string|1-10&#x27;</span>: <span class="string">&#x27;★&#x27;</span>, <span class="comment">//随机生成 1-10 个字符串&quot;★&quot;</span></span><br><span class="line">  <span class="string">&#x27;string2|3&#x27;</span>: <span class="string">&#x27;★&#x27;</span>, <span class="comment">//固定生成 3 个字符串&quot;★&quot;</span></span><br><span class="line">  <span class="string">&#x27;number|+1&#x27;</span>: <span class="number">202</span>, <span class="comment">//每次请求自增 1,初始值为 202</span></span><br><span class="line">  <span class="string">&#x27;number2|1-100.1-10&#x27;</span>: <span class="number">1</span>, <span class="comment">//生成一个浮点数，整数部分1-100，小数部分保留1-10 位。。</span></span><br><span class="line">  <span class="string">&#x27;boolean|1-2&#x27;</span>: <span class="literal">true</span>, <span class="comment">//值为 true 的概率是 1/(1+2)，值为 false 的概率同样是 2/3。</span></span><br><span class="line">  regexp: <span class="regexp">/[a-z][A-Z][0-9]/</span>, <span class="comment">//随机生成满足正则的字符串</span></span><br><span class="line">  <span class="string">&#x27;object|2&#x27;</span>: &#123;</span><br><span class="line">    <span class="number">310000</span>: <span class="string">&#x27;上海市&#x27;</span>,</span><br><span class="line">    <span class="number">320000</span>: <span class="string">&#x27;江苏省&#x27;</span>,</span><br><span class="line">    <span class="number">440000</span>: <span class="string">&#x27;广东省&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">//对象中随机选取 2 个属性，生成对象</span></span><br><span class="line">  <span class="string">&#x27;array|1&#x27;</span>: [<span class="string">&#x27;AMD&#x27;</span>, <span class="string">&#x27;CMD&#x27;</span>], <span class="comment">//数组中随机选取 1 个元素，最终生成值</span></span><br><span class="line">  <span class="string">&#x27;arrayRepeat|3&#x27;</span>: [<span class="string">&#x27;AMD&#x27;</span>, <span class="string">&#x27;CMD&#x27;</span>], <span class="comment">//重复数组元素 3 次，最终生成数组</span></span><br><span class="line">  date: <span class="string">&#x27;@date&#x27;</span>, <span class="comment">//生成随机日期</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="拦截请求-（不会真的发送请求）"><a href="#拦截请求-（不会真的发送请求）" class="headerlink" title="拦截请求 （不会真的发送请求）"></a>拦截请求 （不会真的发送请求）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Mock <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Mock.mock(<span class="string">&#x27;/api&#x27;</span>, &#123;</span><br><span class="line">  <span class="string">&#x27;string|4&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;name1|2-9&#x27;</span>: <span class="string">&#x27;哈&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;name2|5&#x27;</span>: <span class="string">&#x27;哈&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;number|4&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;id|+1&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;num1|2-9&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&#x27;num2|1-100.1-10&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;boolean|4&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&#x27;success1|1&#x27;</span>: [<span class="string">&#x27;true&#x27;</span>, <span class="string">&#x27;false&#x27;</span>],</span><br><span class="line">      <span class="string">&#x27;success2|1&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&#x27;obj|2&#x27;</span>: &#123;</span><br><span class="line">    name: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">    region: <span class="string">&#x27;@region&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;Mock.Random|4&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      boo1: <span class="string">&#x27;@boolean&#x27;</span>,</span><br><span class="line">      img: <span class="string">&#x27;@image&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;@name&#x27;</span>,</span><br><span class="line">      color: <span class="string">&#x27;@color&#x27;</span>,</span><br><span class="line">      title: <span class="string">&#x27;@title&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;生成随机-json&quot;&gt;&lt;a href=&quot;#生成随机-json&quot; class=&quot;headerlink&quot; title=&quot;生成随机 json&quot;&gt;&lt;/a&gt;生成随机 json&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Mock &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;mockjs&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Mock.mock(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;string|1-10&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;★&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//随机生成 1-10 个字符串&amp;quot;★&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;string2|3&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;★&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//固定生成 3 个字符串&amp;quot;★&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;number|+1&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;202&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//每次请求自增 1,初始值为 202&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;number2|1-100.1-10&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//生成一个浮点数，整数部分1-100，小数部分保留1-10 位。。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;boolean|1-2&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//值为 true 的概率是 1/(1+2)，值为 false 的概率同样是 2/3。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  regexp: &lt;span class=&quot;regexp&quot;&gt;/[a-z][A-Z][0-9]/&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//随机生成满足正则的字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;object|2&amp;#x27;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;310000&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;上海市&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;320000&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;江苏省&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;440000&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;广东省&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;comment&quot;&gt;//对象中随机选取 2 个属性，生成对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;array|1&amp;#x27;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;AMD&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;CMD&amp;#x27;&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;//数组中随机选取 1 个元素，最终生成值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&amp;#x27;arrayRepeat|3&amp;#x27;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;AMD&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;CMD&amp;#x27;&lt;/span&gt;], &lt;span class=&quot;comment&quot;&gt;//重复数组元素 3 次，最终生成数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  date: &lt;span class=&quot;string&quot;&gt;&amp;#x27;@date&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;//生成随机日期&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="JS篇" scheme="https://luckychou.gitee.io/categories/JS%E7%AF%87/"/>
    
    
    <category term="JavaScript" scheme="https://luckychou.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="https://luckychou.gitee.io/Design-Pattern/strategy/"/>
    <id>https://luckychou.gitee.io/Design-Pattern/strategy/</id>
    <published>2021-04-06T16:00:00.000Z</published>
    <updated>2021-04-07T09:27:12.161Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://www.wekic.com/article/30">Vincent</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>策略模式是定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。将不变的部分和变化的部分隔开是每个设计模式的主题。策略模式的目的就是使算法的使用与算法分离开来。封装的算法具有一定的独立性，不会随客户端的变化而变化。</p><p>一个策略模式的程序至少有两部分组成。第一部分是策略类，策略类封装了具体的算法，负责具体的计算过程。 第二部分是环境类<code>Context</code>，它接受了客户的要求，随后吧请求委托给某一具体的策略类。要做到这点,<code>Context</code>中要维持对摸个策略对象的引用。</p><a id="more"></a><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这个 demo 是一个计算的代码段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">type, number1, number2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;add&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> number1 + number2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;subtract&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> number1 - number2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;multiply&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> number1 * number2;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> number1 / number2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count1</span>(<span class="params">type, number1, number2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 + number2;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;subtract&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 - number2;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;multiply&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 * number2;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 / number2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者这中间的<code>switch</code>用<code>if...else...</code>来实现，但<code>switch</code>比<code>if...else...</code>更加一目了然。这段计算方法本身没有问题，但是有更加便于维护和扩展的实现方式。下面来进行改进</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = &#123;</span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">number1, number2</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 + number2;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">subtract</span>(<span class="params">number1, number2</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 - number2;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">multiply</span>(<span class="params">number1, number2</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 * number2;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">divide</span>(<span class="params">number1, number2</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number1 / number2;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">count.add(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">count.subtract(<span class="number">10</span>, <span class="number">3</span>); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line">count.multiply(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">count.divide(<span class="number">6</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>经过改造后，可以看成是一个策略模式，接下来看个复杂的例子。商场的会员分普通会员、银卡会员、金卡会员、钻石会员、至尊会员等级别，在商场消费享不同的折扣和积分。会员在同一商品的折扣分别是 98、95、9、8.8、8.5 折优惠。积分比例分别是 1、1.2、1.5、1.6、1.8。购买商品对应的会员折扣和积分获取用策略模式来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> priceStrategy = &#123;</span><br><span class="line">  <span class="function"><span class="title">level1</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * (<span class="number">98</span> / <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level2</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * (<span class="number">95</span> / <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level3</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * (<span class="number">90</span> / <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level4</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * (<span class="number">88</span> / <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level5</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> price * (<span class="number">85</span> / <span class="number">100</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cumulativeScoreStrategy = &#123;</span><br><span class="line">  <span class="function"><span class="title">level1</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(price);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level2</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(price * <span class="number">1.1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level3</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(price * <span class="number">1.2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level4</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(price * <span class="number">1.3</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">level5</span>(<span class="params">price</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(price * <span class="number">1.4</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculatePrice</span>(<span class="params">level, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> priceStrategy[level] ? priceStrategy[level](price) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateScore</span>(<span class="params">level, price</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> actually = calculatePrice(level, price);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    cumulativeScoreStrategy[level] &amp;&amp; cumulativeScoreStrategy[level](actually)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  一台的彩电的价格是 8888，钻石会员的折后价</span></span><br><span class="line">calculatePrice(<span class="string">&#x27;level4&#x27;</span>, <span class="number">8888</span>); <span class="comment">// 7554.8</span></span><br><span class="line"><span class="comment">// 获得的积分</span></span><br><span class="line">calculateScore(<span class="string">&#x27;level4&#x27;</span>, <span class="number">8888</span>); <span class="comment">// 10567</span></span><br></pre></td></tr></table></figure><p>表单验证的策略模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strategies = &#123;</span><br><span class="line">  <span class="function"><span class="title">isCorrectPassword</span>(<span class="params">value, errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^(?:(?=.*[A-Z])(?=.*[0-9])).\\S&#123;7,19&#125;$/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">isNotEmpty</span>(<span class="params">value, errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&#x27;&#x27;</span> || value === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">minLength</span>(<span class="params">value, length, errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &lt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">maxLength</span>(<span class="params">value, length, errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt; length) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">isMobile</span>(<span class="params">value, errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test(value)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">isNotAllEmpty</span>(<span class="params">value = [], errorMsg</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!value.some(<span class="function">(<span class="params">i</span>) =&gt;</span> !!i)) &#123;</span><br><span class="line">      <span class="keyword">return</span> errorMsg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Validator</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cache = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">add</span>(<span class="params">value, rules</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, rule; (rule = rules[i++]); ) &#123;</span><br><span class="line">      <span class="keyword">const</span> strategyArray = rule.strategy.split(<span class="string">&#x27;:&#x27;</span>) || [];</span><br><span class="line">      <span class="keyword">const</span> &#123; errorMsg &#125; = rule;</span><br><span class="line">      <span class="built_in">this</span>.cache.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> strategy = strategyArray.shift();</span><br><span class="line">        strategyArray.unshift(value);</span><br><span class="line">        strategyArray.push(errorMsg);</span><br><span class="line">        <span class="keyword">return</span> strategies[strategy].apply(value, strategyArray);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, validatorFunc; (validatorFunc = <span class="built_in">this</span>.cache[i++]); ) &#123;</span><br><span class="line">      <span class="keyword">const</span> msg = validatorFunc();</span><br><span class="line">      <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">validator.add(registerForm.userName, [</span><br><span class="line">  &#123;</span><br><span class="line">    strategy: <span class="string">&#x27;isNonEmpty&#x27;</span>,</span><br><span class="line">    errorMsg: <span class="string">&#x27;userName not empty!&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    strategy: <span class="string">&#x27;minLength:6&#x27;</span>,</span><br><span class="line">    errorMsg: <span class="string">&#x27;userName length should more than 6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line">validator.add(registerForm.password, [</span><br><span class="line">  &#123;</span><br><span class="line">    strategy: <span class="string">&#x27;minLength:6&#x27;</span>,</span><br><span class="line">    errorMsg: <span class="string">&#x27;password length should more than 6&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> errorMsg = validator.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (errorMsg) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(errorMsg);</span><br><span class="line">  <span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>策略模式属于对象行为型模式，主要针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。策略模式使得算法可以在不影响 到客户端的情况下发生变化。通常，策略模式适用于当一个应用程序需要实现一种特定的服务或者功能，而且该程序有多种实现方式时使用。</p></blockquote><h2 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h2><p>策略模式是一种常用且有效的得设计模式，</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>· 减少重复代码 策略模式利用组合、委托和多态等技术和思想，减少很多模板代码。</p><p>· 扩展性 策略模式提供了对开放-封闭原则的完美支持，将算法封装在独立的策略类里面，使它们易于切换，易于理解，易于扩展。</p><p>· 在策略模式中的算法利用组合和委托让<code>Context</code>拥有执行算法的能力，这也是继承的一种更轻便的替换方案。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>· 使用策略模式会的程序增加了许多策略类或者策略对象，但实际上这比把他们负责的逻辑堆砌在<code>Context</code>中要更好。</p><p>· 要使用策略模式，必须了解所有的策略，必须了解各个策略之间的不同点，因为各种算法之间相互独立，对于复杂的算法处理相同的逻辑无法实现共享。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;https://www.wekic.com/article/30&quot;&gt;Vincent&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;策略模式是定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。将不变的部分和变化的部分隔开是每个设计模式的主题。策略模式的目的就是使算法的使用与算法分离开来。封装的算法具有一定的独立性，不会随客户端的变化而变化。&lt;/p&gt;
&lt;p&gt;一个策略模式的程序至少有两部分组成。第一部分是策略类，策略类封装了具体的算法，负责具体的计算过程。 第二部分是环境类&lt;code&gt;Context&lt;/code&gt;，它接受了客户的要求，随后吧请求委托给某一具体的策略类。要做到这点,&lt;code&gt;Context&lt;/code&gt;中要维持对摸个策略对象的引用。&lt;/p&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="https://luckychou.gitee.io/categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="https://luckychou.gitee.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://luckychou.gitee.io/Design-Pattern/singleton/"/>
    <id>https://luckychou.gitee.io/Design-Pattern/singleton/</id>
    <published>2021-04-06T16:00:00.000Z</published>
    <updated>2021-04-07T08:42:02.901Z</updated>
    
    <content type="html"><![CDATA[<p>单例模式的定义是： 保证一个类有且仅有一个实例，并提供一个访问它的全局访问点。</p><p>思路： 用闭包返回一个实例 对这个实例做条件判断 有就返回 没有就初始化 这样我们在每次 new 的时候就只能得到一个实例</p><p>例如 全局的蒙层 全局的变量都适合用单例模式来创建 因为我们谁也不希望存在两个蒙层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Singleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 你的业务逻辑</span></span><br><span class="line">    <span class="comment">// 例如</span></span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;LuckyChou&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (instance = <span class="built_in">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; name: &#x27;chou&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;单例模式的定义是： 保证一个类有且仅有一个实例，并提供一个访问它的全局访问点。&lt;/p&gt;
&lt;p&gt;思路： 用闭包返回一个实例 对这个实例做条件判断 有就返回 没有就初始化 这样我们在每次 new 的时候就只能得到一个实例&lt;/p&gt;
&lt;p&gt;例如 全局的蒙层 全局的变量都适合用单例模</summary>
      
    
    
    
    <category term="Design Pattern" scheme="https://luckychou.gitee.io/categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="https://luckychou.gitee.io/tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>cookie / session</title>
    <link href="https://luckychou.gitee.io/FE/Browser/cookie-session/"/>
    <id>https://luckychou.gitee.io/FE/Browser/cookie-session/</id>
    <published>2021-04-01T16:00:00.000Z</published>
    <updated>2021-04-15T07:44:55.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转载自：<a href="https://blog.csdn.net/weixin_34332905/article/details/91362567?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">CSDN</a></p></blockquote><h3 id="第一层楼"><a href="#第一层楼" class="headerlink" title="第一层楼"></a>第一层楼</h3><p>什么是 Cookie</p><p>HTTP Cookie（也叫 Web Cookie或浏览器 Cookie）是<strong>服务器发送到用户浏览器</strong>并保存在本地的一小块数据，</p><p>它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</p><p>通常，它用于告知服务端两个请求是否来自同一浏览器，如<strong>保持用户的登录状态</strong>。</p><p>Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。</p><p>Cookie 主要用于以下三个方面：</p><ul><li><p>会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）</p></li><li><p>个性化设置（如用户自定义设置、主题等）</p></li><li><p>浏览器行为跟踪（如跟踪分析用户行为等）</p></li></ul><p>什么是 Session</p><p>Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。</p><p>这样，</p><p><strong>当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，</strong></p><p><strong>而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束</strong>。</p><a id="more"></a><h3 id="第二层楼"><a href="#第二层楼" class="headerlink" title="第二层楼"></a>第二层楼</h3><p>Cookie 和 Session 有什么不同？</p><p>作用范围不同，<strong>Cookie 保存在客户端（浏览器），Session 保存在服务器端</strong>。</p><p>存取方式的不同，<strong>Cookie 只能保存 ASCII，Session 可以存任意数据类型</strong>，</p><p>一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</p><p>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，</p><p>Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</p><p>隐私策略不同，Cookie 存储在客户端，比较容易遭到不法获取，</p><p>早期有人将用户的登录名和密码存储在 Cookie中导致信息被窃取；</p><p>Session 存储在服务端，安全性相对 Cookie 要好一些。</p><p>存储大小不同， 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie。</p><h3 id="第三层楼"><a href="#第三层楼" class="headerlink" title="第三层楼"></a>第三层楼</h3><p>为什么需要 Cookie 和 Session，他们有什么关联？</p><p>说起来为什么需要 Cookie ，这就需要从浏览器开始说起，我们都知道浏览器是没有状态的(HTTP 协议无状态)，</p><p>这意味着浏览器并不知道是张三还是李四在和服务端打交道。</p><p>这个时候就需要有一个机制来告诉服务端，本次操作用户是否登录，是哪个用户在执行的操作，</p><p>那这套机制的实现就需要 Cookie 和 Session 的配合。</p><p>那么 Cookie 和 Session 是如何配合的呢？</p><p>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session ，</p><p>请求返回时将此Session 的唯一标识信息 SessionID 返回给浏览器，浏览器接收到服务器返回的 SessionID 信息后，</p><p>会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名。</p><p>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，</p><p>如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，</p><p>再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，</p><p>如果找到 Session 证明用户已经登录可执行后面操作。</p><p>根据以上流程可知，SessionID 是连接 Cookie 和 Session 的一道桥梁，大部分系统也是根据此原理来验证用户登录状态。</p><h3 id="第四层楼"><a href="#第四层楼" class="headerlink" title="第四层楼"></a>第四层楼</h3><p>既然服务端是根据 Cookie 中的信息判断用户是否登录，</p><p>那么如果浏览器中禁止了 Cookie，如何保障整个机制的正常运转。</p><p>第一种方案，每次请求中都携带一个 SessionID 的参数，</p><p>也可以 Post 的方式提交，也可以在请求的地址后面拼接xxx?SessionID=123456…。</p><p>第二种方案，Token 机制。Token 机制多用于 App 客户端和服务器交互的模式，也可以用于 Web 端做用户状态管理。</p><p>Token 的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。</p><p>Token 机制和 Cookie 和 Session 的使用机制比较类似。</p><p>当用户第一次登录后，服务器根据提交的用户信息生成一个 Token，响应时将 Token 返回给客户端，</p><p>以后客户端只需带上这个 Token 前来请求数据即可，无需再次登录验证。</p><h3 id="第五层楼"><a href="#第五层楼" class="headerlink" title="第五层楼"></a>第五层楼</h3><p>如何考虑分布式 Session 问题？</p><p>在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，</p><p>那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。</p><p>分布式 Session 一般会有以下几种解决方案：</p><ul><li><p>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，</p><p>这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</p></li><li><p>Session 复制，任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点。</p></li><li><p>共享 Session，服务端无状态话，将用户的 Session 等信息使用缓存中间件来统一管理，保障分发到每一个服务器的响应结果都一致。</p></li></ul><p>建议采用第三种方案。</p><h3 id="第六层楼"><a href="#第六层楼" class="headerlink" title="第六层楼"></a>第六层楼</h3><p>如何解决跨域请求？Jsonp 跨域的原理是什么？</p><p>说起跨域请求，必须要了解浏览器的同源策略，同源策略/SOP（Same origin policy）是一种约定，</p><p>由 Netscape 公司 1995年引入浏览器，它是浏览器最核心也最基本的安全功能，</p><p>如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。</p><p>所谓同源是指”<strong>协议+域名+端口</strong>“三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p><p>解决跨域请求的常用方法是：</p><p>通过代理来避免，比如使用 Nginx 在后端转发请求，避免了前端出现跨域的问题。</p><p>通过 Jsonp 跨域</p><p>其它跨域解决方案</p><p>重点谈一下 Jsonp 跨域原理。浏览器的同源策略把跨域请求都禁止了，</p><p>但是页面中的 <code>&lt;script&gt;</code> <code>&lt;img&gt;</code> <code>&lt;iframe&gt;</code>标签是例外，不受同源策略限制。</p><p>Jsonp 就是利用 <code>&lt;script&gt;</code> 标签跨域特性进行跨域数据访问。</p><p>JSONP 的理念就是，与服务端约定好一个回调函数名，服务端接收到请求后，将返回一段 Javascript，</p><p>在这段 Javascript 代码中调用了约定好的回调函数，并且将数据作为参数进行传递。</p><p>当网页接收到这段 Javascript 代码后，就会执行这个回调函数，这时数据已经成功传输到客户端了。</p><p>JSONP 的缺点是：它只支持 GET 请求，而不支持 POST 请求等其他类型的 HTTP 请求。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&quot;https://blog.csdn.net/weixin_34332905/article/details/91362567?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&quot;&gt;CSDN&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一层楼&quot;&gt;&lt;a href=&quot;#第一层楼&quot; class=&quot;headerlink&quot; title=&quot;第一层楼&quot;&gt;&lt;/a&gt;第一层楼&lt;/h3&gt;&lt;p&gt;什么是 Cookie&lt;/p&gt;
&lt;p&gt;HTTP Cookie（也叫 Web Cookie或浏览器 Cookie）是&lt;strong&gt;服务器发送到用户浏览器&lt;/strong&gt;并保存在本地的一小块数据，&lt;/p&gt;
&lt;p&gt;它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。&lt;/p&gt;
&lt;p&gt;通常，它用于告知服务端两个请求是否来自同一浏览器，如&lt;strong&gt;保持用户的登录状态&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Cookie 使基于无状态的 HTTP 协议记录稳定的状态信息成为了可能。&lt;/p&gt;
&lt;p&gt;Cookie 主要用于以下三个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;个性化设置（如用户自定义设置、主题等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器行为跟踪（如跟踪分析用户行为等）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;什么是 Session&lt;/p&gt;
&lt;p&gt;Session 代表着服务器和客户端一次会话的过程。Session 对象存储特定用户会话所需的属性及配置信息。&lt;/p&gt;
&lt;p&gt;这样，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而是在整个用户会话中一直存在下去。当客户端关闭会话，或者 Session 超时失效时会话结束&lt;/strong&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Browser" scheme="https://luckychou.gitee.io/categories/Browser/"/>
    
    
    <category term="Browser" scheme="https://luckychou.gitee.io/tags/Browser/"/>
    
  </entry>
  
  <entry>
    <title>Git / Github / Gitee</title>
    <link href="https://luckychou.gitee.io/Others/git/"/>
    <id>https://luckychou.gitee.io/Others/git/</id>
    <published>2021-03-31T16:00:00.000Z</published>
    <updated>2021-04-06T02:05:51.991Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要罗列一些</p><ul><li><p>我在使用 git 时候的问题</p></li><li><p>git 的常见命令</p></li></ul><p>一方面做个排坑的梳理 一方面也方便自己以后查询这些命令</p><h2 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h2><h3 id="git-pull-push-卡住"><a href="#git-pull-push-卡住" class="headerlink" title="git pull / push 卡住"></a>git pull / push 卡住</h3><p><code>git pull / push</code>卡住的可能性有很多</p><p>自己亲测发生这种问题的时候 往往是 github 也几乎进不去 <code>ping github.com</code> 丢包也很严重</p><p>这里可以登录 ipaddress.com 查看 github.com 的 ip 然后修改 host 可以借助 switchHosts 快速修改 hosts</p><h3 id="gitee-图床"><a href="#gitee-图床" class="headerlink" title="gitee 图床"></a>gitee 图床</h3><p>因为 gitee 国内速度比 github 快 所以博主使用 gitee 作为自己的图床</p><p>但是某一次在使用的时候 却发现了跨域问题？？？？？难道是 gitee 设置了防盗链</p><p>排查之后发现 是因为图片大于 1M gitee 就需要登录校验身份 所以图片需要小于 1M</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>快速切换到上一个分支</th><th>git checkout -</th></tr></thead><tbody><tr><td>撤销当前分支的所有修改</td><td>git checkout .</td></tr><tr><td>拉取远程分支</td><td>git checkout -b [localbranch]/[remote] [branch]</td></tr><tr><td>强制删除分支</td><td>git branch -D [branch]</td></tr><tr><td>将 dev 分支和当前分支合并</td><td>git merge dev</td></tr><tr><td>查看暂存区的文件</td><td>git ls-files</td></tr><tr><td>删除暂存区里的文件</td><td>git rm –cached [file]</td></tr><tr><td>本地分支关联远程分支</td><td>git branch –set-upstream-to [remote]/[branch] [localbranch]</td></tr><tr><td>回退版本</td><td>git reset –hard [id]</td></tr></tbody></table><a id="more"></a><h2 id="git-commit-规范"><a href="#git-commit-规范" class="headerlink" title="git commit 规范"></a>git commit 规范</h2><p>良好的 git commit 不仅有良好的可读性 而且有利于生成 change logs 做一些自动化的事情</p><p>例如 angular.js 的 官网 <a href="https://github.com/angular/angular">https://github.com/angular/angular</a></p><p>在这里 git commit 就非常清晰 不同的 commit 分成了不同的类型 让人一眼就知道这次 commit 对应干了什么</p><p>commit 的规范 网上有很多介绍 这里只说一点</p><p>Commit message 都包括三个部分：header，body 和 footer</p><ul><li><p>Header</p><ul><li><p>type （必需） commit 的类别</p></li><li><p>scope 影响的范围</p></li><li><p>subject（必需） 简短的说明</p></li></ul></li><li><p>Body 详细的说明</p></li><li><p>Footer</p></li></ul><table><thead><tr><th>type 的类型</th><th>描述</th></tr></thead><tbody><tr><td>feat</td><td>新增功能</td></tr><tr><td>fix</td><td>bug 的修复</td></tr><tr><td>perf</td><td>性能优化</td></tr><tr><td>refactor</td><td>重构代码(既没有新增功能，也没有修复 bug)</td></tr><tr><td>build</td><td>主要目的是修改项目构建系统(例如 glup，webpack，rollup 的配置等)的提交</td></tr><tr><td>ci</td><td>主要目的是修改项目继续集成流程(例如 Travis，Jenkins，GitLab CI，Circle 等)的提交</td></tr><tr><td>docs</td><td>文档更新</td></tr><tr><td>style</td><td>不影响程序逻辑的代码修改(修改空白字符，补全缺失的分号等)</td></tr><tr><td>revert</td><td>回滚某个更早之前的提交</td></tr><tr><td>chore</td><td>变更构建流程和辅助工具</td></tr><tr><td>test</td><td>新增测试用例或是更新现有测试</td></tr></tbody></table><p>这里主要的话 还是推荐一款插件去帮助我们规范自己的 commit 就是 husky</p><p><strong>1、Git Commit 检测工具链</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D husky @commitlint/config-conventional @commitlint/cli</span><br></pre></td></tr></table></figure><p>配置 husky 插件（在 package.json 中新增一个 husky 相关配置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;husky&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;hooks&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;pre-commit&quot;</span>: <span class="string">&quot;npm run lint&quot;</span>, <span class="comment">// 不需要在Commit时lint，不配置此项</span></span><br><span class="line">    <span class="string">&quot;commit-msg&quot;</span>: <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span> <span class="comment">// 提交信息检测</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目的根目录下新建一个 commitlint.config.js 文件</p><p><strong>Husky 配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>], <span class="comment">// 使用@commitlint/config-conventional规范</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上配置完毕后，如果不按照规范提交是无法提交的。</p><p>husky 工具会直接从 Git 命令层面打断你的提交。</p><p>请按照规范进行提交</p><p><strong>2、辅助 Git Commit 提交格式化的的工具</strong></p><p><strong>辅助提交工具</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D commitizen // 本地安装</span><br><span class="line"></span><br><span class="line">npm install -g commitizen // 全局安装，全局安装后可以使用 git cz 命令，运行git cz 会帮助我们打开交互式的提交</span><br></pre></td></tr></table></figure><p>本地项目 commitizen 配置（在 package.json 中）</p><p><strong>cz 命令配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;cz&quot;</span>: <span class="string">&quot;git-cz&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./node_modules/cz-conventional-changelog&quot;</span> <span class="comment">// 这个文件是commitizen的内部依赖，里面定义了符合Angular提交规范的相关信息，也会方便我们后续生成changelog.md的日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置完毕后，就可以使用 git cz(全局) 或者 npm run cz/yarn cz 帮助我们进行提交了</p><p><strong>3、日志生成与版本号自动控制工具（项目管理者使用，成员了解即可）</strong></p><p><strong>changelog</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D standard-version</span><br><span class="line"></span><br><span class="line">在package.json 中的配置</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;major&quot;: &quot;standard-version -r major&quot;, // 一个最大的版本升级, 会生成相关的changelog,修改版本号 1.0.0 -&gt; 2.0.0，生成一个Tag</span><br><span class="line">    &quot;minor&quot;: &quot;standard-version -r minor&quot;, // 中等的版本升级 会生成相关的changelog,修改版本号 1.0.0 -&gt; 1.1.0, 生成一个Tag</span><br><span class="line">    &quot;patch&quot;: &quot;standard-version -r patch --skip.tag&quot;,// 最小的版本升级 会生成相关的changelog,修改版本号 1.0.0 -&gt; 1.0.1, 跳过生成Tag.</span><br><span class="line">    &quot;init&quot;: &quot;standard-version  --first-release --skip.tag&quot; // 首次生成相关的changelog, 不修改版本号, 跳过生成Tag. // 也可以不配置进脚本，用npx standard-version  --first-release --skip.tag 执行</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文主要罗列一些&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我在使用 git 时候的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git 的常见命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一方面做个排坑的梳理 一方面也方便自己以后查询这些命令&lt;/p&gt;
&lt;h2 id=&quot;排坑&quot;&gt;&lt;a href=&quot;#排坑&quot; class=&quot;headerlink&quot; title=&quot;排坑&quot;&gt;&lt;/a&gt;排坑&lt;/h2&gt;&lt;h3 id=&quot;git-pull-push-卡住&quot;&gt;&lt;a href=&quot;#git-pull-push-卡住&quot; class=&quot;headerlink&quot; title=&quot;git pull / push 卡住&quot;&gt;&lt;/a&gt;git pull / push 卡住&lt;/h3&gt;&lt;p&gt;&lt;code&gt;git pull / push&lt;/code&gt;卡住的可能性有很多&lt;/p&gt;
&lt;p&gt;自己亲测发生这种问题的时候 往往是 github 也几乎进不去 &lt;code&gt;ping github.com&lt;/code&gt; 丢包也很严重&lt;/p&gt;
&lt;p&gt;这里可以登录 ipaddress.com 查看 github.com 的 ip 然后修改 host 可以借助 switchHosts 快速修改 hosts&lt;/p&gt;
&lt;h3 id=&quot;gitee-图床&quot;&gt;&lt;a href=&quot;#gitee-图床&quot; class=&quot;headerlink&quot; title=&quot;gitee 图床&quot;&gt;&lt;/a&gt;gitee 图床&lt;/h3&gt;&lt;p&gt;因为 gitee 国内速度比 github 快 所以博主使用 gitee 作为自己的图床&lt;/p&gt;
&lt;p&gt;但是某一次在使用的时候 却发现了跨域问题？？？？？难道是 gitee 设置了防盗链&lt;/p&gt;
&lt;p&gt;排查之后发现 是因为图片大于 1M gitee 就需要登录校验身份 所以图片需要小于 1M&lt;/p&gt;
&lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快速切换到上一个分支&lt;/th&gt;
&lt;th&gt;git checkout -&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;撤销当前分支的所有修改&lt;/td&gt;
&lt;td&gt;git checkout .&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;拉取远程分支&lt;/td&gt;
&lt;td&gt;git checkout -b [localbranch]/[remote] [branch]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;强制删除分支&lt;/td&gt;
&lt;td&gt;git branch -D [branch]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;将 dev 分支和当前分支合并&lt;/td&gt;
&lt;td&gt;git merge dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看暂存区的文件&lt;/td&gt;
&lt;td&gt;git ls-files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;删除暂存区里的文件&lt;/td&gt;
&lt;td&gt;git rm –cached [file]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;本地分支关联远程分支&lt;/td&gt;
&lt;td&gt;git branch –set-upstream-to [remote]/[branch] [localbranch]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;回退版本&lt;/td&gt;
&lt;td&gt;git reset –hard [id]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/categories/Others/"/>
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 函数节流 防抖</title>
    <link href="https://luckychou.gitee.io/FE/JS/debounce-throttle/"/>
    <id>https://luckychou.gitee.io/FE/JS/debounce-throttle/</id>
    <published>2021-03-30T16:00:00.000Z</published>
    <updated>2021-04-03T03:39:10.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    函数防抖：一个频繁触发的函数，在规定时间内，只让函数最后一次触发 例如：</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    - 用户输入搜索框 避免每次敲击键盘都发送请求</span></span><br><span class="line"><span class="comment">    - 登录、发短信等按钮避免用户点击太快，以致于发送了多次请求</span></span><br><span class="line"><span class="comment">    - 调整浏览器窗口大小时，resize 次数过于频繁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    思路：关键在于清零 例如登录按钮点击一秒后发送登录请求 我们就可以创建一个定时器 每次用户点击的时候都清除这个定时器 让定时器重置</span></span><br><span class="line"><span class="comment">         这样就保证了这一秒内不会因为用户都频繁点击而一直发送请求 代码如下</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn  要执行的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>delay 延迟的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    函数节流：一个函数执行一次后，只有大于设定的执行周期才会执行第二次</span></span><br><span class="line"><span class="comment">    适用场景：有一个频繁触发的函数，在规定时间内，只让函数触发一次 优化性能 例如</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    - scroll时间 每隔1s重新计算位置 而不是一直计算</span></span><br><span class="line"><span class="comment">    - 浏览器播放时间 每隔1s重新计算一次播放进度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    思路：需要两个时间 lastTime 和 nowTime 来计算时间差 由此来判断是否执行事件</span></span><br><span class="line"><span class="comment">         先将lastTime初始化为0 然后获取系统时间 做差判断是否大于delay 如果大于则执行事件并将nowTime赋予lastTime 由此完成节流</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>fn  要执行的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>delay 延迟的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span> (nowTime - lastTime &gt; delay) &#123;</span><br><span class="line">      fn.call(<span class="built_in">this</span>);</span><br><span class="line">      lastTime = nowTime;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数防抖&quot;&gt;&lt;a href=&quot;#函数防抖&quot; class=&quot;headerlink&quot; title=&quot;函数防抖&quot;&gt;&lt;/a&gt;函数防抖&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="JS" scheme="https://luckychou.gitee.io/categories/JS/"/>
    
    
    <category term="JavaScript" scheme="https://luckychou.gitee.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React小册 -- rematch</title>
    <link href="https://luckychou.gitee.io/FE/React/rematch/"/>
    <id>https://luckychou.gitee.io/FE/React/rematch/</id>
    <published>2021-03-29T16:00:00.000Z</published>
    <updated>2021-05-04T16:22:21.798Z</updated>
    
    <content type="html"><![CDATA[<p>关于 rematch 的介绍 可以参考<a href="https://rematch.gitbook.io/handbook/mu-de">传送门</a></p><p>rematch 可以简化传统的 redux 使我们免去写 actionType actionCreator</p><p>我们用 rematch 来实现一个数字的累加操作</p><p>保存 store 的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    num: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    <span class="function"><span class="title">setNum</span>(<span class="params">state, num</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, num &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  effects: <span class="function">(<span class="params">dispatch</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">increment</span>(<span class="params">payload, rootState</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; num &#125; = rootState.count;</span><br><span class="line">      num += payload;</span><br><span class="line">      dispatch.count.setNum(num);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> count;</span><br></pre></td></tr></table></figure><a id="more"></a><p>model.js 在这个文件中 我们做一个聚合导出 可以让代码更加清晰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> count &#125; <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> total &#125; <span class="keyword">from</span> <span class="string">&#x27;./total&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> ...</span><br></pre></td></tr></table></figure><p>init 函数会帮助我们创建一个 store 同时它会帮助我们自动开启 redux devtools 调试工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">&#x27;@rematch/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> models <span class="keyword">from</span> <span class="string">&#x27;./model&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = init(&#123; models &#125;);</span><br></pre></td></tr></table></figure><p>业务组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider, useSelector, useDispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./models&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Counter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = useSelector(<span class="function">(<span class="params">state</span>) =&gt;</span> state.count);</span><br><span class="line">  <span class="keyword">const</span> dispatch = useDispatch();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;div&gt;&#123;counter.num&#125;&lt;/div&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch.count.increment(<span class="number">1</span>)&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">      &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch.count.increment(<span class="number">10</span>)&#125;&gt;+<span class="number">10</span>&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">View</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &lt;Counter /&gt;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 我介绍一下 useSelector 和 useDispatch</p><p>这是 react-redux 在 7.x 之后为了 hook 而推出的</p><p>useSelector 返回 Redux store 的引用</p><p>useDispatch 返回 Redux store 中对 dispatch 函数的引用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关于 rematch 的介绍 可以参考&lt;a href=&quot;https://rematch.gitbook.io/handbook/mu-de&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;rematch 可以简化传统的 redux 使我们免去写 actionType actionCreator&lt;/p&gt;
&lt;p&gt;我们用 rematch 来实现一个数字的累加操作&lt;/p&gt;
&lt;p&gt;保存 store 的文件&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; count = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  state: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  reducers: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setNum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;state, num&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; ...state, num &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  effects: &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;dispatch&lt;/span&gt;) =&amp;gt;&lt;/span&gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;increment&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;payload, rootState&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &amp;#123; num &amp;#125; = rootState.count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      num += payload;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      dispatch.count.setNum(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="React" scheme="https://luckychou.gitee.io/categories/React/"/>
    
    
    <category term="React" scheme="https://luckychou.gitee.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 跨域设置</title>
    <link href="https://luckychou.gitee.io/Others/chrome/"/>
    <id>https://luckychou.gitee.io/Others/chrome/</id>
    <published>2021-03-25T16:00:00.000Z</published>
    <updated>2021-04-14T10:24:21.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -n -a <span class="string">&#x27;/Applications/Google Chrome.app&#x27;</span> --args --user-data-dir=<span class="string">&quot;/tmp/chrome_dev_test&quot;</span> --disable-web-security</span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 在电脑上新建一个目录，例如：C:\MyChromeDevUserData</span><br><span class="line"></span><br><span class="line">- 在属性页面中的目标输入框里加上 --disable-web-security --user-data-dir=C:\MyChromeDevUserData，--user-data-dir 的值就是刚才新建的目录</span><br><span class="line"></span><br><span class="line">- 点击应用和确定后关闭属性页面，并打开 chrome 浏览器</span><br></pre></td></tr></table></figure><h3 id="2021-4-更新"><a href="#2021-4-更新" class="headerlink" title="2021.4 更新"></a>2021.4 更新</h3><p>浏览器发送请求 但是无法带上 cookie 导致 页面一直重定向</p><p>1、在谷歌浏览器中搜索 chrome://flags/<br>2、在出现的页面搜索框中搜索 SameSite<br>3、把第一个改为 disable<br>4、然后重启浏览器</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h3&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/categories/Others/"/>
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>Node Express &amp;&amp; Koa</title>
    <link href="https://luckychou.gitee.io/FE/Node/express-koa/"/>
    <id>https://luckychou.gitee.io/FE/Node/express-koa/</id>
    <published>2021-03-21T16:00:00.000Z</published>
    <updated>2021-03-22T14:06:58.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2><p>通过 express 我们可以轻松的构建一个 web 服务器 例如以下代码就在 3000 端口创建了一个 web 服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><a id="more"></a><p>在我的理解中 express 就是一个对一系列中间件调用的函数</p><p>比如常见的处理 get 和 post 请求的方法都是中间件的调用</p><p>当我们 require express 的时候 本质上是导入了一个函数</p><p>可以查看源码 以下是入口文件 express.js 的截取代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span> = <span class="built_in">module</span>.exports = createApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an express application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Function&#125;</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="variable">public</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApplication</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> app = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    app.handle(req, res, next);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  mixin(app, EventEmitter.prototype, <span class="literal">false</span>);</span><br><span class="line">  mixin(app, proto, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the prototype that will get set on requests</span></span><br><span class="line">  app.request = <span class="built_in">Object</span>.create(req, &#123;</span><br><span class="line">    app: &#123; <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">value</span>: app &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// expose the prototype that will get set on responses</span></span><br><span class="line">  app.response = <span class="built_in">Object</span>.create(res, &#123;</span><br><span class="line">    app: &#123; <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">value</span>: app &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  app.init();</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>express.js 导出了一个函数 createApplication 也就是我们 require 导入的函数</p><p>在这个函数中初始化了一个 app 的函数 拥有 req / res / next 等参数 并通过 minin 这个函数混入了很多属性到 app 中</p><p>具体的 API 可查阅 <a href="http://expressjs.com/en/4x/api.html">http://expressjs.com/en/4x/api.html</a></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>传递给 express 的一个回调函数 中间件位于请求和响应之间 所以它可以</p><p>• 执行任何代码</p><p>• 更改请求和响应对象</p><p>• 结束请求响应周期 res.end</p><p>• 调用下一个中间件</p><p>我们可以使用 app.use 的方法在全局注册中间件 这样所有的路由都会匹配到这个中间件</p><p>也可以在具体的路由中使用中间件 例如如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewareA = (<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">do</span> something...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(middlewareA)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, middlewareA ,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">do</span> something...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="托管静态文件"><a href="#托管静态文件" class="headerlink" title="托管静态文件"></a>托管静态文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过/static 来访问public文件夹</span></span><br><span class="line">app.use(<span class="string">&quot;/static&quot;</span>, express.static(path.join(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;静态资源服务器部署成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>get 请求的参数都在 url 中 我们可以通过 query 和 params 这两种形式来获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/query&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(req.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/param/:id&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.json(req.params);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p>post 请求的参数在 body 但是如果我们直接打印 body 是看不到任何结果的</p><p>这是需要引入 body-parser 这个库</p><p>这个库和不同版本的 express 集成情况如下</p><ul><li><p>3.x 内置</p></li><li><p>4.x 分离</p></li><li><p>4.16 内置函数</p></li></ul><p>所以如果是 4.x 4.16 以前的版本 我们需要手动安装这个第三方库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 老版本写法 不推荐</span></span><br><span class="line"><span class="comment">// var bodyParser = require(&quot;body-parser&quot;);</span></span><br><span class="line"><span class="comment">// app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span></span><br><span class="line"><span class="comment">// app.use(bodyParser.json());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.16以后的写法 推荐</span></span><br><span class="line"><span class="comment">// extended false 表示使用node的内置模块querystring来解析</span></span><br><span class="line"><span class="comment">// true 则表示使用第三方模块qs来解析</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>如果使用原生的方法实现文件上传 后台处理起来会非常麻烦 因为二进制流中不仅有文件的信息 还有 header 的一些相关信息 我们可以打印一些相关的数据来看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/upload&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.headers);</span><br><span class="line">  <span class="keyword">let</span> data = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">buffer</span>) =&gt;</span> &#123;</span><br><span class="line">    data += buffer;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start~~~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后我们访问 localhost:8080/upload 并上传一个文件 就可以看到打印台输出了一段乱码的二进制流和请求头的 headers</p><p>headers 信息如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user-agent&quot;</span>: <span class="string">&quot;PostmanRuntime/7.13.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cache-control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;postman-token&quot;</span>: <span class="string">&quot;e48f538d-2988-4e39-8d50-80fdede0ed02&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;localhost:8080&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content-type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=--------------------------372446874075094600561084&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;content-length&quot;</span>: <span class="string">&quot;376074&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;connection&quot;</span>: <span class="string">&quot;keep-alive&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果仔细对比 你就会发现二进制流中包含了 header 中的 content-type 中的 boundary 还有文件的 mime 类型等 如果不加处理的直接使用 fs 模块将这个二进制流写入到文件中 那么最终文件肯定无法被正确解析</p><p>如果引入 multer 模块 那么文件上传功能就会变得很简单了</p><p>例如 我们需要用户上传头像 代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">  destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  第一个参数为err的相关信息 node的回调函数都是错误优先的回调</span></span><br><span class="line">    <span class="comment">//  第二个参数为文件上传的目的地</span></span><br><span class="line">    cb(<span class="literal">null</span>, <span class="string">&quot;uploads&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 同样的 第一个参数为错误信息 第二个参数为文件名</span></span><br><span class="line">    cb(</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      file.fieldname + <span class="string">&quot;-&quot;</span> + <span class="built_in">Date</span>.now() + path.extname(file.originalname)</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/upload&quot;</span>, upload.single(<span class="string">&quot;avatar&quot;</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.file);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start~~~&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上述方法演示的是单文件上传 req.file 中存储了文件的相关信息 如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;fieldname&quot;</span>: <span class="string">&quot;avatar&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;originalname&quot;</span>: <span class="string">&quot;CHOU16.jpg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;encoding&quot;</span>: <span class="string">&quot;7bit&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;mimetype&quot;</span>: <span class="string">&quot;image/jpeg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;destination&quot;</span>: <span class="string">&quot;uploads&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;filename&quot;</span>: <span class="string">&quot;avatar-1616384964609.jpg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;uploads\\avatar-1616384964609.jpg&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">375864</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要支持多文件上传 例如还需要上传用户背景图 代码可改写成如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">app.post(</span><br><span class="line">  <span class="string">&quot;/fields&quot;</span>,</span><br><span class="line">  upload.fields([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;avatar&quot;</span>, <span class="attr">macCount</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;bg&quot;</span>, <span class="attr">maxCount</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  ]),</span><br><span class="line">  (req, res, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.files);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   avatar: [</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//       fieldname: &#x27;avatar&#x27;,</span></span><br><span class="line"><span class="comment">//       originalname: &#x27;CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       encoding: &#x27;7bit&#x27;,</span></span><br><span class="line"><span class="comment">//       mimetype: &#x27;image/jpeg&#x27;,</span></span><br><span class="line"><span class="comment">//       destination: &#x27;uploads&#x27;,</span></span><br><span class="line"><span class="comment">//       filename: &#x27;CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       path: &#x27;uploads/CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       size: 646567</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   ],</span></span><br><span class="line"><span class="comment">//   bg: [</span></span><br><span class="line"><span class="comment">//     &#123;</span></span><br><span class="line"><span class="comment">//       fieldname: &#x27;bg&#x27;,</span></span><br><span class="line"><span class="comment">//       originalname: &#x27;CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       encoding: &#x27;7bit&#x27;,</span></span><br><span class="line"><span class="comment">//       mimetype: &#x27;image/jpeg&#x27;,</span></span><br><span class="line"><span class="comment">//       destination: &#x27;uploads&#x27;,</span></span><br><span class="line"><span class="comment">//       filename: &#x27;CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       path: &#x27;uploads/CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//       size: 398519</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>如果是需要多张背景图上传 同一个 field 则可以用 array 的写法 第二个参数为最大可上传的数量</p><p>如果超过了最大数量 multer 会返回 MulterError: Unexpected field</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&quot;/array&quot;</span>, upload.array(<span class="string">&quot;bg&quot;</span>, <span class="number">3</span>), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.files);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     fieldname: &#x27;bg&#x27;,</span></span><br><span class="line"><span class="comment">//     originalname: &#x27;CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     encoding: &#x27;7bit&#x27;,</span></span><br><span class="line"><span class="comment">//     mimetype: &#x27;image/jpeg&#x27;,</span></span><br><span class="line"><span class="comment">//     destination: &#x27;uploads&#x27;,</span></span><br><span class="line"><span class="comment">//     filename: &#x27;CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     path: &#x27;uploads/CHOU1.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     size: 646567</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     fieldname: &#x27;bg&#x27;,</span></span><br><span class="line"><span class="comment">//     originalname: &#x27;CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     encoding: &#x27;7bit&#x27;,</span></span><br><span class="line"><span class="comment">//     mimetype: &#x27;image/jpeg&#x27;,</span></span><br><span class="line"><span class="comment">//     destination: &#x27;uploads&#x27;,</span></span><br><span class="line"><span class="comment">//     filename: &#x27;CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     path: &#x27;uploads/CHOU2.jpg&#x27;,</span></span><br><span class="line"><span class="comment">//     size: 398519</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>如果将所有的请求处理都放在 index.js 中处理 那么 index.js 的代码就会变的很臃肿 这个时候我们可以使用路由来拆分我们的代码</p><p>例如项目中有一个用户模块 实现增删改查的功能</p><p>我们就可以新建一个 user.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/add&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;added&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/delete&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/update&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;updated&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/select&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;selected&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>然后在 index.js 中导入这个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&quot;/user&quot;</span>, userRouter);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><p>express 中的中间件都是同步代码 即一个中间件执行完毕才会去执行另一个中间件中的代码</p><p>例如我们有如下功能要实现 在 ABC 三个中间件中 分别追加给 message 追加内容 然后在 A 中间件中输出结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareA = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  req.message = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  req.message += <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  next();</span><br><span class="line">  res.end(req.message);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareB = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  req.message += <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareC = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  req.message += <span class="string">&quot;C&quot;</span>;</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(middlewareA);</span><br><span class="line">app.use(middlewareB);</span><br><span class="line">app.use(middlewareC);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">8000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>next 函数会在中间件栈中找到下一个中间件并执行 所以 middlewareA 中的 res.end 会在所有中间件都执行完毕后才执行 输入 ABC</p><p>那么 如果我们在第三个中间件中用定时器来模拟异步操作 最终的结果会怎么样呢</p><p>将 middlewareC 改造成如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> middlewareC = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    req.message += <span class="string">&quot;C&quot;</span>;</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过访问 8000 端口 我们可以看到这次最终的输出变成了 AB 由此可见</p><p><strong>中间件中的代码都是同步调用的</strong></p><p>而这 也是 express 面对异步场景下的一种无力 而 koa 则不一样</p><h2 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h2><p>koa 支持 async 和 await 的用法 这就意味着在 koa 中可以抛去 express 中回调函数的写法 用一种更优雅的方式来解决异步场景</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>与 express 不同的是 koa 导出的不是函数 而是一个名为 Application 的对象</p><p>所以在使用上我们只需要 new 一个实例即可 其他用法和 Express 基本相似</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Koa&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>这里我们借助第三方模块 koa-router 因为 koa 本身很纯净 基本所有功能都要通过第三方插件来实现</p><p>新建一个 user.js 的路由模块 Koa 将 express 中的 request 和 response 都合成到了上下文对象 context 中 简写为 ctx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="keyword">new</span> Router(&#123; <span class="attr">prefix</span>: <span class="string">&quot;/user&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">userRouter.get(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.body = <span class="string">&quot;welcome~~&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">userRouter.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  ctx.body = <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = userRouter;</span><br></pre></td></tr></table></figure><p>然后在 index 中引入 user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(userRouter.routes());</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Koa&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h3><p>koa 中需要引入 koa-bodyparser 来解析 json 和 urlencoded</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&quot;koa-router&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;koa-bodyparser&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(router.routes());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析query</span></span><br><span class="line">router.get(<span class="string">&quot;/query&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.query);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析params</span></span><br><span class="line">router.get(<span class="string">&quot;/params/:id&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.params);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析urlencoded</span></span><br><span class="line">router.post(<span class="string">&quot;/urlencoded&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json</span></span><br><span class="line">router.post(<span class="string">&quot;/json&quot;</span>, <span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ctx.request.body);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意 koa-bodyparser 中间件需要最先被使用</p><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>重新回到 express 中的 demo 如果想在 koa 中处理异步操作就变的非常简单了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&quot;koa&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareA = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  ctx.msg += <span class="string">&quot;A&quot;</span>;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">  ctx.body = ctx.msg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareB = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.msg += <span class="string">&quot;B&quot;</span>;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middlewareC = <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.get(<span class="string">&quot;https://koa.bootcss.com/&quot;</span>);</span><br><span class="line">  ctx.msg += res.data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.use(middlewareA);</span><br><span class="line">app.use(middlewareB);</span><br><span class="line">app.use(middlewareC);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Koa&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h3><p>洋葱模型其实不是什么高大尚的概念 通过下图我们不难发现</p><p>所有中间件都会被 request 访问两次 就像剥洋葱一样 这就是洋葱模型</p><img src="https://gitee.com/LuckyChou/blog-images/raw/master/node/middleware.png" /><h2 id="express-对比-koa"><a href="#express-对比-koa" class="headerlink" title="express 对比 koa"></a>express 对比 koa</h2><ul><li><p>express 是完整和强大的，其中帮助我们内置了非常多好用的功能;</p></li><li><p>koa 是简洁和自由的，它只包含最核心的功能，并不会对我们使用其他中间件进行任何的限制。 甚至是在 app 中连最基本的 get、post 都没有给我们提供;我们需要通过自己或者路由来判断请求方式或者其他功能</p></li><li><p>koa 中间件支持 async await</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Express&quot;&gt;&lt;a href=&quot;#Express&quot; class=&quot;headerlink&quot; title=&quot;Express&quot;&gt;&lt;/a&gt;Express&lt;/h2&gt;&lt;p&gt;通过 express 我们可以轻松的构建一个 web 服务器 例如以下代码就在 3000 端口创建了一个 web 服务器&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;express&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = express();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;quot;start&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Node" scheme="https://luckychou.gitee.io/categories/Node/"/>
    
    
    <category term="Node" scheme="https://luckychou.gitee.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh 美化iterm2 / vs code</title>
    <link href="https://luckychou.gitee.io/Others/oh-my-zsh/"/>
    <id>https://luckychou.gitee.io/Others/oh-my-zsh/</id>
    <published>2021-03-15T16:00:00.000Z</published>
    <updated>2021-03-16T01:39:30.631Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/9c3439cc3bdb">配置iterm2</a></p><p><a href="https://blog.csdn.net/qwe641259875/article/details/107201760/">国内安装oh-my-zsh<a></p><blockquote><p>在VSCode的settings.json文件，加入 : “terminal.integrated.fontFamily”: “Meslo LG M for Powerline”,</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/9c3439cc3bdb&quot;&gt;配置iterm2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qwe641259875/article/details/10720176</summary>
      
    
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/categories/Others/"/>
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>vim常用命令</title>
    <link href="https://luckychou.gitee.io/Others/vim/"/>
    <id>https://luckychou.gitee.io/Others/vim/</id>
    <published>2021-03-15T16:00:00.000Z</published>
    <updated>2021-03-16T13:31:05.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>默认进入命令模式 在其他模式下按 esc 进入命令模式<br>x 删除光标所在字符<br>dd 删除光标所在行<br>u 复原到上一个动作<br>ctrl + r 重做上一个动作<br>G 跳到文本末<br>gg 跳到文本第一个字符<br>^ 跳到当前行到第一个字符</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式 输入 i / a / o 进入输入模式</p><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式输入 英文输入法下的 : 进入<br>q 退出<br>w 保存</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h3&gt;&lt;p&gt;默认进入命令模式 在其他模式下按 esc 进入命令模式&lt;br&gt;x 删除光标所在字符&lt;br&gt;dd 删除光标所在行&lt;br&gt;u 复</summary>
      
    
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/categories/Others/"/>
    
    
    <category term="Others" scheme="https://luckychou.gitee.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>React小册 -- redux中间件 redux-thunk / redux-saga</title>
    <link href="https://luckychou.gitee.io/FE/React/middleware/"/>
    <id>https://luckychou.gitee.io/FE/React/middleware/</id>
    <published>2021-03-11T16:00:00.000Z</published>
    <updated>2021-05-04T16:34:48.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>redux 中的数据流大致是</p><p>UI —————&gt; action（plain）—————&gt; reducer —————&gt; state —————&gt; UI</p><p>action 是一个原始 js 对象（plain object）且 reducer 是一个纯函数</p><p><strong>但是如果存在副作用，比如 ajax 异步请求等等，那么应该怎么做？</strong></p><a id="more"></a><p>我们需要实现的功能也很简单 就是继续上一讲的 demo 完善 article 中的 reducer</p><p>article 组件中派发一个 get_list 的 action 然后我们需要在 store 中更新网络请求回来后的 lists</p><p>首先我们在 reducer 中处理网络请求看看行不行的通</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> TYPES <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IAction &#125; <span class="keyword">from</span> <span class="string">&#x27;@type/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">&#x27;@utils/api&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  list: [],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, <span class="attr">action</span>: IAction) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TYPES.GET_LIST: &#123;</span><br><span class="line">      API.getList().then(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(list);</span><br><span class="line">        <span class="keyword">return</span> &#123; ...state, list &#125;;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过点击按钮 我们确实可以看到控制台上打印出了 我们在 reducer 中发送网络请求后的打印语句</p><p>但是查看 devtools 我们会发现 store 并没有更新</p><p>也就是说 reducer 中所有改变 store 的方法走的都是同步的代码</p><p>这也不难理解 因为这会让我们的 store 变的更加可控 它不会因为异步操作的某个回掉函数在不知道什么时候改变了 store</p><p>但是 如果我们就是要发送请求 针对这种场景 我们该如果去实现呢</p><p>这个时候就可以引入中间件来帮助我们完成异步操作</p><p>redux 增加中间件处理副作用后的数据流大致如下</p><p>UI —————&gt; action(side function) —————&gt; middleware —————&gt; action(plain) —————&gt; reducer —————&gt; state —————&gt; UI</p><p>本文就主要介绍两种中间件 <strong>redux-thunk</strong> 和 <strong>redux-saga</strong></p><h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>store 下的入口文件 index</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, combineReducers, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> thunkMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./home/reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> article <span class="keyword">from</span> <span class="string">&#x27;./article/reducers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  home,</span><br><span class="line">  article,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(applyMiddleware(thunkMiddleware));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(rootReducer, enhancer);</span><br></pre></td></tr></table></figure><p>然后是 actionCreators</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是箭头函数的语法 用来返回一个对象</span></span><br><span class="line">() =&gt; (&#123;&#125;)</span><br><span class="line"><span class="comment">// 如果不使用简写 就需要写成如下这种样子 这两种写法是等价的</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ACTIONS <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> API <span class="keyword">from</span> <span class="string">&#x27;@utils/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Dispatch &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getList = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: ACTIONS.GET_LIST,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setList = <span class="function">(<span class="params">list: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: ACTIONS.SET_LIST,</span><br><span class="line">  list,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getListSync = <span class="function">(<span class="params">list: <span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: ACTIONS.GET_LIST_ASYNC,</span><br><span class="line">  list,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getListAsync = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch: Dispatch) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; list &#125; = <span class="keyword">await</span> API.getList();</span><br><span class="line">    dispatch(getListSync(list));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其他所有地方都按正常使用即可 在组件内我们使用的是进行了异步操作的那个函数</p><p>通过 thunk 我们可以在 dispatch 前拦截 action</p><p>然后进行网络请求等异步操作 最后让 action 带上我们需要的数据 变成原始的 action(plain object) 再 dispatch 出去</p><p>但是这种方法的缺点也很明显 就是将异步请求的操作和 actionCreator 杂糅在了一起</p><p>对于每一个需要异步操作的 action 我们都需要在 actionCreator 中写一个对应的函数 这样会使 actionCreator 变的越来越大 不易于管理</p><p>所以对应的 又有一种中间件 <strong>saga</strong></p><h3 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga"></a>redux-saga</h3><p>在 saga 中 side effect 都移到了 saga.js 文件中 不再和 actionCreator 杂糅在一起</p><p>例如如下 saga.js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeEvery, put &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getName &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionCreators&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行副作用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchGetName</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> axios.get(<span class="string">&#x27;/__mock__.json&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> name = res.data.data;</span><br><span class="line">  <span class="keyword">yield</span> put(getName(name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听GET_NAME_VALUE action 在dispatch前执行fetchGetName 最后包装成原始action</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">mySaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> takeEvery(<span class="string">&#x27;GET_NAME_VALUE_ASYNC&#x27;</span>, fetchGetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure><p>我们的 actionCreator 还是纯净的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; GET_NAME_VALUE &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getName = <span class="function">(<span class="params">name</span>) =&gt;</span> (&#123;</span><br><span class="line">  type: GET_NAME_VALUE,</span><br><span class="line">  name,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>再来看看 saga 怎么和 store 建立联系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">&#x27;redux-saga&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> mySaga <span class="keyword">from</span> <span class="string">&#x27;./sagas&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> enhancer = composeEnhancers(applyMiddleware(sagaMiddleware));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, enhancer);</span><br><span class="line"></span><br><span class="line">sagaMiddleware.run(mySaga);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>注意 触发 action 和触发 saga 的 type 不能同名 不然会导致 saga 一直执行 action</p><p>然后在业务组件中 我们 dispatch 的 type 应是 saga 对应的 type</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;redux 中的数据流大致是&lt;/p&gt;
&lt;p&gt;UI —————&amp;gt; action（plain）—————&amp;gt; reducer —————&amp;gt; state —————&amp;gt; UI&lt;/p&gt;
&lt;p&gt;action 是一个原始 js 对象（plain object）且 reducer 是一个纯函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是如果存在副作用，比如 ajax 异步请求等等，那么应该怎么做？&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://luckychou.gitee.io/categories/React/"/>
    
    
    <category term="React" scheme="https://luckychou.gitee.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 类</title>
    <link href="https://luckychou.gitee.io/FE/TS/class/"/>
    <id>https://luckychou.gitee.io/FE/TS/class/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-03-16T01:40:18.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;moving&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(<span class="string">&quot;哈士奇&quot;</span>).move()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 公有属性 所有地方都可访问 默认在不声明的情况下 都是public</span></span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 私有属性 只有在声明类的内部才可以访问</span></span><br><span class="line">  <span class="keyword">private</span> color: <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// 受保护的属性 只有在声明类及其子类才可以访问</span></span><br><span class="line">  <span class="keyword">protected</span> weight: <span class="built_in">number</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, color: <span class="built_in">string</span>, weight: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">this</span>.color = color</span><br><span class="line">    <span class="built_in">this</span>.weight = weight</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 声明类内部 所有属性都可以访问</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27; , &#x27;</span> + <span class="built_in">this</span>.color + <span class="built_in">this</span>.weight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在外部 只能访问 public 修饰的属性 bark 没有修饰符 默认为public</span></span><br><span class="line"><span class="keyword">new</span> Pet(<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">10</span>).bark()</span><br><span class="line"><span class="keyword">new</span> Pet(<span class="string">&#x27;哈士奇&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">10</span>).name = <span class="string">&#x27;蓝色哈士奇&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, color: <span class="built_in">string</span>, weight: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, color, weight)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 子类中 color无法访问 因为color是父类的私有属性 但是可以访问到父类受保护的属性weight</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;I am &#x27;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27; , &#x27;</span> + <span class="built_in">this</span>.weight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法分配到 &quot;name&quot; ，因为它是只读属性</span></span><br><span class="line"><span class="comment">// new Pet(&quot;哈士奇&quot;).name = &quot;二哈&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是可以读取</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> Pet(<span class="string">&#x27;哈士奇&#x27;</span>).name)</span><br></pre></td></tr></table></figure><h2 id="存取器-setter-getter"><a href="#存取器-setter-getter" class="headerlink" title="存取器 setter getter"></a>存取器 setter getter</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;get&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Pet(<span class="string">&#x27;dog&#x27;</span>)</span><br><span class="line">dog.fullName = <span class="string">&#x27;lucky&#x27;</span> <span class="comment">// set</span></span><br><span class="line">dog.fullName <span class="comment">// get</span></span><br></pre></td></tr></table></figure><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><p>静态属性 不需要实例化对象后再使用 直接用类名调用即可</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;moving&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pet.move()</span><br></pre></td></tr></table></figure><h2 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类 abstract"></a>抽象类 abstract</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// abstract声明的方法必须在实现类中实现它</span></span><br><span class="line">  <span class="keyword">abstract</span> bark(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span> </span>&#123;</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name)</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  bark(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  x: <span class="built_in">number</span></span><br><span class="line">  y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point &#123;</span><br><span class="line">  z: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3d: Point3d = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.name = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;move&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;moving&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;super&lt;/span&gt;(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dog(&lt;span class=&quot;string&quot;&gt;&amp;quot;哈士奇&amp;quot;&lt;/span&gt;).move()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 接口</title>
    <link href="https://luckychou.gitee.io/FE/TS/interface/"/>
    <id>https://luckychou.gitee.io/FE/TS/interface/</id>
    <published>2021-03-10T16:00:00.000Z</published>
    <updated>2021-03-16T01:41:53.107Z</updated>
    
    <content type="html"><![CDATA[<details yellow><summary> <p>ts interface</p> </summary>              <div class='content'>              <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> * 对行为的抽象</span></span><br><span class="line"><span class="comment"> * 定义的变量必须和接口中的变量一致 不能多也不能少</span></span><br><span class="line"><span class="comment"> * 类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 可选属性 ?</span></span><br><span class="line"><span class="comment"> * 只读属性 readonly</span></span><br><span class="line"><span class="comment"> * 继承接口 extends</span></span><br><span class="line"><span class="comment"> * 类实现接口 implements</span></span><br><span class="line"><span class="comment"> * 可索引的类型</span></span><br><span class="line"><span class="comment"> * 混合类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  height?: <span class="built_in">string</span>; <span class="comment">// 可选属性</span></span><br><span class="line">  <span class="keyword">readonly</span> gender: <span class="built_in">string</span>; <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chou: Person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;chou&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承接口</span></span><br><span class="line"><span class="keyword">interface</span> Student <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  sno: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stu: Student = &#123;</span><br><span class="line">  name: <span class="string">&#x27;chou&#x27;</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">  gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  sno: <span class="string">&#x27;001&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类实现接口</span></span><br><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">  add(x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myCounter</span> <span class="title">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  add(x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可索引的类型</span></span><br><span class="line"><span class="comment">// 表示用number索引去访问属性时 会返回string类型</span></span><br><span class="line"><span class="comment">// 例如 arr = [&#x27;chou&#x27;] arr[0] = &#x27;chou&#x27;</span></span><br><span class="line"><span class="comment">// ts支持两种索引类型 string和number 但是数字索引的返回值必须是字符串索引返回值类型的子类型</span></span><br><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;details yellow&gt;&lt;summary&gt; &lt;p&gt;ts interface&lt;/p&gt; &lt;/summary&gt;
              &lt;div class=&#39;content&#39;&gt;
              &lt;figure class=&quot;highlight ts&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 数据类型</title>
    <link href="https://luckychou.gitee.io/FE/TS/data-type/"/>
    <id>https://luckychou.gitee.io/FE/TS/data-type/</id>
    <published>2021-03-09T16:00:00.000Z</published>
    <updated>2021-04-17T16:33:38.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * boolean</span></span><br><span class="line"><span class="comment"> * 用构造函数Boolean创造的是对象不是布尔值</span></span><br><span class="line"><span class="comment"> * 直接使用Boolean可以返回一个布尔值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> isShow: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> isOk: <span class="built_in">boolean</span> = <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// let isTrue: boolean = new Boolean(false) 错误写法 等号右边是一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * number</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> username: <span class="built_in">string</span> = <span class="string">&#x27;chou&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * array</span></span><br><span class="line"><span class="comment"> * 在类型后面直接跟上[]</span></span><br><span class="line"><span class="comment"> * 使用数组泛型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> list1: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * tuple</span></span><br><span class="line"><span class="comment"> * 元组类型允许我们表示一个已知元素数量和类型的数组，各元素的类型不必相同</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> person: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;chou&#x27;</span>, <span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * null &amp;&amp; undefined</span></span><br><span class="line"><span class="comment"> * 默认情况下 undefined 和 null 是所有类型的子类 可以给其他类型赋值</span></span><br><span class="line"><span class="comment"> * 在tsconfig.json中配置strict后 它们就只能赋值给void和它们自己</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// let myString: string = undefined</span></span><br><span class="line"><span class="comment">// let myNumber: number = undefined</span></span><br><span class="line"><span class="keyword">let</span> myVoid: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * enum</span></span><br><span class="line"><span class="comment"> * 默认情况下 从0开始为元素编号</span></span><br><span class="line"><span class="comment"> * 手动编号后 后面的元素从手动编号的那个值开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">enum</span> myColor &#123;</span><br><span class="line">  Red,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> color: myColor = myColor.Blue;</span><br><span class="line"><span class="built_in">console</span>.log(color); <span class="comment">// 3 因为我们手动给myColor编号了 Blue为3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量枚举 在编译后不会有任何内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> mouth &#123;</span><br><span class="line">  Jan = <span class="number">1</span>,</span><br><span class="line">  Feb,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减少魔法数字</span></span><br><span class="line"><span class="built_in">enum</span> STATUS &#123;</span><br><span class="line">  READY = <span class="number">0</span>,</span><br><span class="line">  OK = <span class="number">1</span>,</span><br><span class="line">  FAILED = -<span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">type</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> === STATUS.READY) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> === STATUS.OK) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">type</span> === STATUS.FAILED) &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * any</span></span><br><span class="line"><span class="comment"> * 可以声明那些在编程阶段还不确定的变量类型</span></span><br><span class="line"><span class="comment"> * 可以调用任意方法</span></span><br><span class="line"><span class="comment"> * 可以访问任意属性</span></span><br><span class="line"><span class="comment"> * 变量在声明的时候 未指定其类型 那么它会被识别为任意值类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> password;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="comment">// let password:any</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * void</span></span><br><span class="line"><span class="comment"> * 当一个函数没有返回值时 通常会为其声明返回值为void</span></span><br><span class="line"><span class="comment"> * 只能为void类型的变量 赋予undefined和null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showName</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  alert(<span class="string">&#x27;chou&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * never</span></span><br><span class="line"><span class="comment"> * 一般是那些抛出异常的函数</span></span><br><span class="line"><span class="comment"> * never是所有类型的子类</span></span><br><span class="line"><span class="comment"> * never类型没有子类 即使是any类型 也不能给never赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myError</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * object</span></span><br><span class="line"><span class="comment"> * 除number，string，boolean，symbol，null或undefined之外的类型</span></span><br><span class="line"><span class="comment"> * 在tsconfig.json中 未开启strict时 可以将null赋予object类型的变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> myObject: <span class="built_in">object</span>;</span><br><span class="line"></span><br><span class="line">myObject = &#123; <span class="attr">name</span>: <span class="string">&#x27;chou&#x27;</span> &#125;;</span><br><span class="line"><span class="comment">// myObject = null</span></span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联合类型</span></span><br><span class="line"><span class="comment"> * 用 | 隔开每一个类型</span></span><br><span class="line"><span class="comment"> * 当访问属性或调用方法时 ts不确定该变量最后什么类型 所以只能是公共的类型或方法</span></span><br><span class="line"><span class="comment"> * 联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showNumber</span>(<span class="params">myNumber: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> | <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="comment">// myNumber.toFixed(3); 错误</span></span><br><span class="line">  <span class="keyword">return</span> myNumber.toString(); <span class="comment">// 只能使用string和number共有的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Props1 &#123;</span><br><span class="line">  className: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Props2 &#123;</span><br><span class="line">  onClick: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;交叉类型 将多个类型合并为一个类型，新的类型将具有所有类型的特性</span></span><br><span class="line"><span class="keyword">const</span> props: Props1 &amp; Props2 = &#123;</span><br><span class="line">  onClick: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  className: <span class="string">&#x27;luckyship-btn&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  类型断言</span></span><br><span class="line"><span class="comment"> *  类型断言好比其他语言中的类型转换</span></span><br><span class="line"><span class="comment"> *  它用在开发者明确知道类型的时候</span></span><br><span class="line"><span class="comment"> *  方法一: &lt;&gt;</span></span><br><span class="line"><span class="comment"> *  方法二: as</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="keyword">function</span> (<span class="params">val: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> val.length;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (val <span class="keyword">as</span> <span class="built_in">number</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">TypeScript 基础数据类型 / 联合类型 / 类型断言 / 交叉类型</summary>
    
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="https://luckychou.gitee.io/tags/TypeScript/"/>
    
  </entry>
  
</feed>
